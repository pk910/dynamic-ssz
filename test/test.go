// Code generated by dynamic-ssz. DO NOT EDIT.
package main

import (
	"github.com/attestantio/go-eth2-client/spec/altair"
	"github.com/attestantio/go-eth2-client/spec/capella"
	"github.com/attestantio/go-eth2-client/spec/deneb"
	"github.com/attestantio/go-eth2-client/spec/electra"
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/sszutils"
	go_bitfield "github.com/prysmaticlabs/go-bitfield"
)
var _ = dynssz.NewDynSsz
var _ = sszutils.ErrListTooBig


func (t *TestType) MarshalSSZDyn(ds *dynssz.DynSsz, buf []byte) (dst []byte, err error) {
  dst = buf
  fn1 := func(t uint64) (err error) { // uint64
    dst = sszutils.MarshalUint64(dst, uint64(t))
    return err
  }
  fn2 := func(t phase0.Root) (err error) { // phase0.Root:32
    dst = append(dst, t[:32]...)
    return err
  }
  fn3 := func(t phase0.Slot) (err error) { // phase0.Slot
    dst = sszutils.MarshalUint64(dst, uint64(t))
    return err
  }
  fn4 := func(t *phase0.Fork) (err error) { // *phase0.Fork
    buf, err = t.MarshalSSZTo(buf)
    return err
  }
  fn5 := func(t *phase0.BeaconBlockHeader) (err error) { // *phase0.BeaconBlockHeader
    buf, err = t.MarshalSSZTo(buf)
    return err
  }
  fn6 := func(t []phase0.Root) (err error) { // []phase0.Root:8192:SLOTS_PER_HISTORICAL_ROOT:32
    hasLimit, limit, err := ds.ResolveSpecValue("SLOTS_PER_HISTORICAL_ROOT")
    if err != nil {
      return err
    }
    if !hasLimit {
      limit = 8192
    }
    vlen := len(t)
    if vlen > int(limit) {
      return sszutils.ErrListTooBig
    }
    for i := 0; i < vlen; i++ {
      if err = fn2(t[i]); err != nil {
        return err
      }
    }
    if vlen < int(limit) {
      dst = sszutils.AppendZeroPadding(dst, (int(limit) - vlen) * 32)
    }
    return err
  }
  fn7 := func(t []phase0.Root) (err error) { // []phase0.Root:32
    vlen := len(t)
    for i := 0; i < vlen; i++ {
      if err = fn2(t[i]); err != nil {
        return err
      }
    }
    return err
  }
  fn8 := func(t *phase0.ETH1Data) (err error) { // *phase0.ETH1Data
    buf, err = t.MarshalSSZTo(buf)
    return err
  }
  fn9 := func(t []*phase0.ETH1Data) (err error) { // []*phase0.ETH1Data
    vlen := len(t)
    for i := 0; i < vlen; i++ {
      if err = fn8(t[i]); err != nil {
        return err
      }
    }
    return err
  }
  fn10 := func(t *phase0.Validator) (err error) { // *phase0.Validator
    buf, err = t.MarshalSSZTo(buf)
    return err
  }
  fn11 := func(t []*phase0.Validator) (err error) { // []*phase0.Validator
    vlen := len(t)
    for i := 0; i < vlen; i++ {
      if err = fn10(t[i]); err != nil {
        return err
      }
    }
    return err
  }
  fn12 := func(t phase0.Gwei) (err error) { // phase0.Gwei
    dst = sszutils.MarshalUint64(dst, uint64(t))
    return err
  }
  fn13 := func(t []phase0.Gwei) (err error) { // []phase0.Gwei
    vlen := len(t)
    for i := 0; i < vlen; i++ {
      if err = fn12(t[i]); err != nil {
        return err
      }
    }
    return err
  }
  fn14 := func(t []phase0.Root) (err error) { // []phase0.Root:65536:EPOCHS_PER_HISTORICAL_VECTOR:32
    hasLimit, limit, err := ds.ResolveSpecValue("EPOCHS_PER_HISTORICAL_VECTOR")
    if err != nil {
      return err
    }
    if !hasLimit {
      limit = 65536
    }
    vlen := len(t)
    if vlen > int(limit) {
      return sszutils.ErrListTooBig
    }
    for i := 0; i < vlen; i++ {
      if err = fn2(t[i]); err != nil {
        return err
      }
    }
    if vlen < int(limit) {
      dst = sszutils.AppendZeroPadding(dst, (int(limit) - vlen) * 32)
    }
    return err
  }
  fn15 := func(t []phase0.Gwei) (err error) { // []phase0.Gwei:8192:EPOCHS_PER_SLASHINGS_VECTOR
    hasLimit, limit, err := ds.ResolveSpecValue("EPOCHS_PER_SLASHINGS_VECTOR")
    if err != nil {
      return err
    }
    if !hasLimit {
      limit = 8192
    }
    vlen := len(t)
    if vlen > int(limit) {
      return sszutils.ErrListTooBig
    }
    for i := 0; i < vlen; i++ {
      if err = fn12(t[i]); err != nil {
        return err
      }
    }
    if vlen < int(limit) {
      dst = sszutils.AppendZeroPadding(dst, (int(limit) - vlen) * 8)
    }
    return err
  }
  fn16 := func(t altair.ParticipationFlags) (err error) { // altair.ParticipationFlags
    dst = sszutils.MarshalUint8(dst, uint8(t))
    return err
  }
  fn17 := func(t []altair.ParticipationFlags) (err error) { // []altair.ParticipationFlags
    vlen := len(t)
    for i := 0; i < vlen; i++ {
      if err = fn16(t[i]); err != nil {
        return err
      }
    }
    return err
  }
  fn18 := func(t go_bitfield.Bitvector4) (err error) { // go_bitfield.Bitvector4:1
    limit := 1
    vlen := len(t)
    if vlen > int(limit) {
      return sszutils.ErrListTooBig
    }
    vlimit := int(limit)
    if vlimit > vlen {
      vlimit = vlen
    }
    dst = append(dst, t[:vlimit]...)
    if vlen < int(limit) {
      dst = sszutils.AppendZeroPadding(dst, int(limit) - vlen)
    }
    return err
  }
  fn19 := func(t *phase0.Checkpoint) (err error) { // *phase0.Checkpoint
    buf, err = t.MarshalSSZTo(buf)
    return err
  }
  fn20 := func(t []uint64) (err error) { // []uint64
    vlen := len(t)
    for i := 0; i < vlen; i++ {
      if err = fn1(t[i]); err != nil {
        return err
      }
    }
    return err
  }
  fn21 := func(t *altair.SyncCommittee) (err error) { // *altair.SyncCommittee
    buf, err = t.MarshalSSZTo(buf)
    return err
  }
  fn22 := func(t *deneb.ExecutionPayloadHeader) (err error) { // *deneb.ExecutionPayloadHeader
    buf, err = t.MarshalSSZTo(buf)
    return err
  }
  fn23 := func(t capella.WithdrawalIndex) (err error) { // capella.WithdrawalIndex
    dst = sszutils.MarshalUint64(dst, uint64(t))
    return err
  }
  fn24 := func(t phase0.ValidatorIndex) (err error) { // phase0.ValidatorIndex
    dst = sszutils.MarshalUint64(dst, uint64(t))
    return err
  }
  fn25 := func(t *capella.HistoricalSummary) (err error) { // *capella.HistoricalSummary
    buf, err = t.MarshalSSZTo(buf)
    return err
  }
  fn26 := func(t []*capella.HistoricalSummary) (err error) { // []*capella.HistoricalSummary
    vlen := len(t)
    for i := 0; i < vlen; i++ {
      if err = fn25(t[i]); err != nil {
        return err
      }
    }
    return err
  }
  fn27 := func(t phase0.Epoch) (err error) { // phase0.Epoch
    dst = sszutils.MarshalUint64(dst, uint64(t))
    return err
  }
  fn28 := func(t *electra.PendingDeposit) (err error) { // *electra.PendingDeposit
    buf, err = t.MarshalSSZTo(buf)
    return err
  }
  fn29 := func(t []*electra.PendingDeposit) (err error) { // []*electra.PendingDeposit
    vlen := len(t)
    for i := 0; i < vlen; i++ {
      if err = fn28(t[i]); err != nil {
        return err
      }
    }
    return err
  }
  fn30 := func(t *electra.PendingPartialWithdrawal) (err error) { // *electra.PendingPartialWithdrawal
    buf, err = t.MarshalSSZTo(buf)
    return err
  }
  fn31 := func(t []*electra.PendingPartialWithdrawal) (err error) { // []*electra.PendingPartialWithdrawal
    vlen := len(t)
    for i := 0; i < vlen; i++ {
      if err = fn30(t[i]); err != nil {
        return err
      }
    }
    return err
  }
  fn32 := func(t *electra.PendingConsolidation) (err error) { // *electra.PendingConsolidation
    buf, err = t.MarshalSSZTo(buf)
    return err
  }
  fn33 := func(t []*electra.PendingConsolidation) (err error) { // []*electra.PendingConsolidation
    vlen := len(t)
    for i := 0; i < vlen; i++ {
      if err = fn32(t[i]); err != nil {
        return err
      }
    }
    return err
  }
  fn34 := func(t *TestType) (err error) { // *TestType
    dstlen := len(dst)
    // Field #0 'GenesisTime'
    if err = fn1(t.GenesisTime); err != nil {
      return err
    }
    // Field #1 'GenesisValidatorsRoot'
    if err = fn2(t.GenesisValidatorsRoot); err != nil {
      return err
    }
    // Field #2 'Slot'
    if err = fn3(t.Slot); err != nil {
      return err
    }
    // Field #3 'Fork'
    if err = fn4(t.Fork); err != nil {
      return err
    }
    // Field #4 'LatestBlockHeader'
    if err = fn5(t.LatestBlockHeader); err != nil {
      return err
    }
    // Field #5 'BlockRoots'
    if err = fn6(t.BlockRoots); err != nil {
      return err
    }
    // Field #6 'StateRoots'
    if err = fn6(t.StateRoots); err != nil {
      return err
    }
    // Offset #7 'HistoricalRoots'
    offset7 := len(dst)
    dst = sszutils.MarshalOffset(dst, 0)
    // Field #8 'ETH1Data'
    if err = fn8(t.ETH1Data); err != nil {
      return err
    }
    // Offset #9 'ETH1DataVotes'
    offset9 := len(dst)
    dst = sszutils.MarshalOffset(dst, 0)
    // Field #10 'ETH1DepositIndex'
    if err = fn1(t.ETH1DepositIndex); err != nil {
      return err
    }
    // Offset #11 'Validators'
    offset11 := len(dst)
    dst = sszutils.MarshalOffset(dst, 0)
    // Offset #12 'Balances'
    offset12 := len(dst)
    dst = sszutils.MarshalOffset(dst, 0)
    // Field #13 'RANDAOMixes'
    if err = fn14(t.RANDAOMixes); err != nil {
      return err
    }
    // Field #14 'Slashings'
    if err = fn15(t.Slashings); err != nil {
      return err
    }
    // Offset #15 'PreviousEpochParticipation'
    offset15 := len(dst)
    dst = sszutils.MarshalOffset(dst, 0)
    // Offset #16 'CurrentEpochParticipation'
    offset16 := len(dst)
    dst = sszutils.MarshalOffset(dst, 0)
    // Field #17 'JustificationBits'
    if err = fn18(t.JustificationBits); err != nil {
      return err
    }
    // Field #18 'PreviousJustifiedCheckpoint'
    if err = fn19(t.PreviousJustifiedCheckpoint); err != nil {
      return err
    }
    // Field #19 'CurrentJustifiedCheckpoint'
    if err = fn19(t.CurrentJustifiedCheckpoint); err != nil {
      return err
    }
    // Field #20 'FinalizedCheckpoint'
    if err = fn19(t.FinalizedCheckpoint); err != nil {
      return err
    }
    // Offset #21 'InactivityScores'
    offset21 := len(dst)
    dst = sszutils.MarshalOffset(dst, 0)
    // Field #22 'CurrentSyncCommittee'
    if err = fn21(t.CurrentSyncCommittee); err != nil {
      return err
    }
    // Field #23 'NextSyncCommittee'
    if err = fn21(t.NextSyncCommittee); err != nil {
      return err
    }
    // Offset #24 'LatestExecutionPayloadHeader'
    offset24 := len(dst)
    dst = sszutils.MarshalOffset(dst, 0)
    // Field #25 'NextWithdrawalIndex'
    if err = fn23(t.NextWithdrawalIndex); err != nil {
      return err
    }
    // Field #26 'NextWithdrawalValidatorIndex'
    if err = fn24(t.NextWithdrawalValidatorIndex); err != nil {
      return err
    }
    // Offset #27 'HistoricalSummaries'
    offset27 := len(dst)
    dst = sszutils.MarshalOffset(dst, 0)
    // Field #28 'DepositRequestsStartIndex'
    if err = fn1(t.DepositRequestsStartIndex); err != nil {
      return err
    }
    // Field #29 'DepositBalanceToConsume'
    if err = fn12(t.DepositBalanceToConsume); err != nil {
      return err
    }
    // Field #30 'ExitBalanceToConsume'
    if err = fn12(t.ExitBalanceToConsume); err != nil {
      return err
    }
    // Field #31 'EarliestExitEpoch'
    if err = fn27(t.EarliestExitEpoch); err != nil {
      return err
    }
    // Field #32 'ConsolidationBalanceToConsume'
    if err = fn12(t.ConsolidationBalanceToConsume); err != nil {
      return err
    }
    // Field #33 'EarliestConsolidationEpoch'
    if err = fn27(t.EarliestConsolidationEpoch); err != nil {
      return err
    }
    // Offset #34 'PendingDeposits'
    offset34 := len(dst)
    dst = sszutils.MarshalOffset(dst, 0)
    // Offset #35 'PendingPartialWithdrawals'
    offset35 := len(dst)
    dst = sszutils.MarshalOffset(dst, 0)
    // Offset #36 'PendingConsolidations'
    offset36 := len(dst)
    dst = sszutils.MarshalOffset(dst, 0)
    // Dynamic Field #7 'HistoricalRoots'
    sszutils.UpdateOffset(dst[offset7:offset7+4], len(dst)-dstlen)
    if err = fn7(t.HistoricalRoots); err != nil {
      return err
    }
    // Dynamic Field #9 'ETH1DataVotes'
    sszutils.UpdateOffset(dst[offset9:offset9+4], len(dst)-dstlen)
    if err = fn9(t.ETH1DataVotes); err != nil {
      return err
    }
    // Dynamic Field #11 'Validators'
    sszutils.UpdateOffset(dst[offset11:offset11+4], len(dst)-dstlen)
    if err = fn11(t.Validators); err != nil {
      return err
    }
    // Dynamic Field #12 'Balances'
    sszutils.UpdateOffset(dst[offset12:offset12+4], len(dst)-dstlen)
    if err = fn13(t.Balances); err != nil {
      return err
    }
    // Dynamic Field #15 'PreviousEpochParticipation'
    sszutils.UpdateOffset(dst[offset15:offset15+4], len(dst)-dstlen)
    if err = fn17(t.PreviousEpochParticipation); err != nil {
      return err
    }
    // Dynamic Field #16 'CurrentEpochParticipation'
    sszutils.UpdateOffset(dst[offset16:offset16+4], len(dst)-dstlen)
    if err = fn17(t.CurrentEpochParticipation); err != nil {
      return err
    }
    // Dynamic Field #21 'InactivityScores'
    sszutils.UpdateOffset(dst[offset21:offset21+4], len(dst)-dstlen)
    if err = fn20(t.InactivityScores); err != nil {
      return err
    }
    // Dynamic Field #24 'LatestExecutionPayloadHeader'
    sszutils.UpdateOffset(dst[offset24:offset24+4], len(dst)-dstlen)
    if err = fn22(t.LatestExecutionPayloadHeader); err != nil {
      return err
    }
    // Dynamic Field #27 'HistoricalSummaries'
    sszutils.UpdateOffset(dst[offset27:offset27+4], len(dst)-dstlen)
    if err = fn26(t.HistoricalSummaries); err != nil {
      return err
    }
    // Dynamic Field #34 'PendingDeposits'
    sszutils.UpdateOffset(dst[offset34:offset34+4], len(dst)-dstlen)
    if err = fn29(t.PendingDeposits); err != nil {
      return err
    }
    // Dynamic Field #35 'PendingPartialWithdrawals'
    sszutils.UpdateOffset(dst[offset35:offset35+4], len(dst)-dstlen)
    if err = fn31(t.PendingPartialWithdrawals); err != nil {
      return err
    }
    // Dynamic Field #36 'PendingConsolidations'
    sszutils.UpdateOffset(dst[offset36:offset36+4], len(dst)-dstlen)
    if err = fn33(t.PendingConsolidations); err != nil {
      return err
    }
    return err
  }
  err = fn34(t)
  return dst, err
}
func (t *TestType) MarshalSSZ() ([]byte, error) {
  return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *TestType) MarshalSSZTo(buf []byte) (dst []byte, err error) {
  return t.MarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}


func (t *TestType) SizeSSZDyn(ds *dynssz.DynSsz) (size int) {
  fn1 := func(t []phase0.Root) (size int) { // []phase0.Root:8192:SLOTS_PER_HISTORICAL_ROOT:32
    hasLimit, limit, _ := ds.ResolveSpecValue("SLOTS_PER_HISTORICAL_ROOT")
    if !hasLimit {
      limit = 8192
    }
    size += int(limit) * 32
    return size
  }
  fn2 := func(t []phase0.Root) (size int) { // []phase0.Root:32
    size += len(t) * 32
    return size
  }
  fn3 := func(t []*phase0.ETH1Data) (size int) { // []*phase0.ETH1Data
    size += len(t) * 72
    return size
  }
  fn4 := func(t []*phase0.Validator) (size int) { // []*phase0.Validator
    size += len(t) * 121
    return size
  }
  fn5 := func(t []phase0.Gwei) (size int) { // []phase0.Gwei
    size += len(t) * 8
    return size
  }
  fn6 := func(t []phase0.Root) (size int) { // []phase0.Root:65536:EPOCHS_PER_HISTORICAL_VECTOR:32
    hasLimit, limit, _ := ds.ResolveSpecValue("EPOCHS_PER_HISTORICAL_VECTOR")
    if !hasLimit {
      limit = 65536
    }
    size += int(limit) * 32
    return size
  }
  fn7 := func(t []phase0.Gwei) (size int) { // []phase0.Gwei:8192:EPOCHS_PER_SLASHINGS_VECTOR
    hasLimit, limit, _ := ds.ResolveSpecValue("EPOCHS_PER_SLASHINGS_VECTOR")
    if !hasLimit {
      limit = 8192
    }
    size += int(limit) * 8
    return size
  }
  fn8 := func(t []altair.ParticipationFlags) (size int) { // []altair.ParticipationFlags
    size += len(t) * 1
    return size
  }
  fn9 := func(t []uint64) (size int) { // []uint64
    size += len(t) * 8
    return size
  }
  fn10 := func(t *altair.SyncCommittee) (size int) { // *altair.SyncCommittee
    size = t.SizeSSZ()
    return size
  }
  fn11 := func(t *deneb.ExecutionPayloadHeader) (size int) { // *deneb.ExecutionPayloadHeader
    size = t.SizeSSZ()
    return size
  }
  fn12 := func(t []*capella.HistoricalSummary) (size int) { // []*capella.HistoricalSummary
    size += len(t) * 64
    return size
  }
  fn13 := func(t []*electra.PendingDeposit) (size int) { // []*electra.PendingDeposit
    size += len(t) * 192
    return size
  }
  fn14 := func(t []*electra.PendingPartialWithdrawal) (size int) { // []*electra.PendingPartialWithdrawal
    size += len(t) * 24
    return size
  }
  fn15 := func(t []*electra.PendingConsolidation) (size int) { // []*electra.PendingConsolidation
    size += len(t) * 16
    return size
  }
  fn16 := func(t *TestType) (size int) { // *TestType
    size = 441
    size += fn1(t.BlockRoots)
    size += fn1(t.StateRoots)
    size += 4 + fn2(t.HistoricalRoots)
    size += 4 + fn3(t.ETH1DataVotes)
    size += 4 + fn4(t.Validators)
    size += 4 + fn5(t.Balances)
    size += fn6(t.RANDAOMixes)
    size += fn7(t.Slashings)
    size += 4 + fn8(t.PreviousEpochParticipation)
    size += 4 + fn8(t.CurrentEpochParticipation)
    size += 4 + fn9(t.InactivityScores)
    size += fn10(t.CurrentSyncCommittee)
    size += fn10(t.NextSyncCommittee)
    size += 4 + fn11(t.LatestExecutionPayloadHeader)
    size += 4 + fn12(t.HistoricalSummaries)
    size += 4 + fn13(t.PendingDeposits)
    size += 4 + fn14(t.PendingPartialWithdrawals)
    size += 4 + fn15(t.PendingConsolidations)
    return size
  }
  return fn16(t)
}
func (t *TestType) SizeSSZ() (size int) {
  return t.SizeSSZDyn(dynssz.GetGlobalDynSsz())
}



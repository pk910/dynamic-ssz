// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: 4d8f3f203d0f2ede267ed1671f1a7e582ca815fce7f69f17791d87c14c1ae964
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package main

import (
	"github.com/attestantio/go-eth2-client/spec/phase0"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
)

var _ = sszutils.ErrListTooBig

func (t *Test1) MarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	return t.MarshalSSZTo(buf)
}

func (t *Test1) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(Test1)
	}
	{ // Field #0 'F1'
		t := t.F1
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	return dst, nil
}

func (t *Test1) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *Test1) SizeSSZDyn(_ sszutils.DynamicSpecs) (size int) {
	return t.SizeSSZ()
}

func (t *Test1) SizeSSZ() (size int) {
	return 8
}

func (t *Test1) UnmarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (err error) {
	return t.UnmarshalSSZ(buf)
}

func (t *Test1) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 8 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'F1' (static)
		buf := buf[0:8]
		t.F1 = phase0.ValidatorIndex(sszutils.UnmarshallUint64(buf))
	}
	return nil
}

func (t *Test1) HashTreeRootWithDyn(_ sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	return t.HashTreeRootWith(hh)
}

func (t *Test1) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(Test1)
	}
	idx := hh.Index()
	{ // Field #0 'F1'
		t := t.F1
		hh.PutUint64(uint64(t))
	}
	hh.Merkleize(idx)
	return nil
}

func (t *Test1) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}

func (t *Test1) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *Test2) MarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	return t.MarshalSSZTo(buf)
}

func (t *Test2) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(Test2)
	}
	{ // Field #0 'T1'
		t := t.T1
		if t == nil {
			t = new(Test1)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	{ // Field #1 'T3'
		t := t.T3
		if t == nil {
			t = new(Test3)
		}
		if dst, err = t.MarshalSSZTo(dst); err != nil {
			return dst, err
		}
	}
	return dst, nil
}

func (t *Test2) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *Test2) SizeSSZDyn(_ sszutils.DynamicSpecs) (size int) {
	return t.SizeSSZ()
}

func (t *Test2) SizeSSZ() (size int) {
	return 32
}

func (t *Test2) UnmarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (err error) {
	return t.UnmarshalSSZ(buf)
}

func (t *Test2) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 32 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'T1' (static)
		buf := buf[0:8]
		if t.T1 == nil {
			t.T1 = new(Test1)
		}
		if err = t.T1.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	{ // Field #1 'T3' (static)
		buf := buf[8:32]
		if t.T3 == nil {
			t.T3 = new(Test3)
		}
		if err = t.T3.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return nil
}

func (t *Test2) HashTreeRootWithDyn(ds sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	if t == nil {
		t = new(Test2)
	}
	idx := hh.Index()
	{ // Field #0 'T1'
		t := t.T1
		if t == nil {
			t = new(Test1)
		}
		if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
			return err
		}
	}
	{ // Field #1 'T3'
		t := t.T3
		if t == nil {
			t = new(Test3)
		}
		if err := t.HashTreeRootWith(hh); err != nil {
			return err
		}
	}
	hh.Merkleize(idx)
	return nil
}

func (t *Test2) HashTreeRootWith(hh sszutils.HashWalker) error {
	return t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh)
}

func (t *Test2) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}

func (t *Test2) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *Test3) MarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	return t.MarshalSSZTo(buf)
}

func (t *Test3) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(Test3)
	}
	{ // Field #0 'F1'
		t := t.F1
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #1 'F3'
		t := t.F3
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #2 'F4'
		t := t.F4
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	return dst, nil
}

func (t *Test3) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *Test3) SizeSSZDyn(_ sszutils.DynamicSpecs) (size int) {
	return t.SizeSSZ()
}

func (t *Test3) SizeSSZ() (size int) {
	return 24
}

func (t *Test3) UnmarshalSSZDyn(_ sszutils.DynamicSpecs, buf []byte) (err error) {
	return t.UnmarshalSSZ(buf)
}

func (t *Test3) UnmarshalSSZ(buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 24 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'F1' (static)
		buf := buf[0:8]
		t.F1 = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #1 'F3' (static)
		buf := buf[8:16]
		t.F3 = uint64(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #2 'F4' (static)
		buf := buf[16:24]
		t.F4 = uint64(sszutils.UnmarshallUint64(buf))
	}
	return nil
}

func (t *Test3) HashTreeRootWithDyn(_ sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	return t.HashTreeRootWith(hh)
}

func (t *Test3) HashTreeRootWith(hh sszutils.HashWalker) error {
	if t == nil {
		t = new(Test3)
	}
	idx := hh.Index()
	{ // Field #0 'F1'
		t := t.F1
		hh.PutUint64(uint64(t))
	}
	{ // Field #1 'F3'
		t := t.F3
		hh.PutUint64(uint64(t))
	}
	{ // Field #2 'F4'
		t := t.F4
		hh.PutUint64(uint64(t))
	}
	hh.Merkleize(idx)
	return nil
}

func (t *Test3) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}

func (t *Test3) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}

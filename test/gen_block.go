// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: d3895aa87efeaba6866428e3f3372545486a55f01f18ef32ccd88d361a721d10
// Version: v1.0.1 (https://github.com/pk910/dynamic-ssz)

// Copyright (c) 2025 pk910
// SPDX-License-Identifier: Apache-2.0

package main

import (
	"github.com/attestantio/go-eth2-client/spec/altair"
	"github.com/attestantio/go-eth2-client/spec/bellatrix"
	"github.com/attestantio/go-eth2-client/spec/capella"
	"github.com/attestantio/go-eth2-client/spec/deneb"
	"github.com/attestantio/go-eth2-client/spec/phase0"
	"github.com/holiman/uint256"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
	go_bitfield "github.com/prysmaticlabs/go-bitfield"
)

var _ = sszutils.ErrListTooBig

func (t *TestBeaconBlock) MarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *phase0.ETH1Data) (err error) { // *phase0.ETH1Data
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn2 := func(t *phase0.ProposerSlashing) (err error) { // *phase0.ProposerSlashing
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn3 := func(t []*phase0.ProposerSlashing) (err error) { // []*phase0.ProposerSlashing
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			if err = fn2(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn4 := func(t *phase0.AttesterSlashing) (err error) { // *phase0.AttesterSlashing
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn5 := func(t []*phase0.AttesterSlashing) (err error) { // []*phase0.AttesterSlashing
		vlen := len(t)
		dstlen := len(dst)
		dst = sszutils.AppendZeroPadding(dst, vlen*4)
		for i := 0; i < vlen; i++ {
			sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
			if err = fn4(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn6 := func(t *phase0.Attestation) (err error) { // *phase0.Attestation
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn7 := func(t []*phase0.Attestation) (err error) { // []*phase0.Attestation
		vlen := len(t)
		dstlen := len(dst)
		dst = sszutils.AppendZeroPadding(dst, vlen*4)
		for i := 0; i < vlen; i++ {
			sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
			if err = fn6(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn8 := func(t [][]byte) (err error) { // [][]uint8:33:DEPOSIT_CONTRACT_TREE_DEPTH+1:32
		hasLimit, limit, err := ds.ResolveSpecValue("DEPOSIT_CONTRACT_TREE_DEPTH+1")
		if err != nil {
			return err
		}
		if !hasLimit {
			limit = 33
		}
		vlen := len(t)
		if vlen > int(limit) {
			return sszutils.ErrListTooBig
		}
		for i := 0; i < vlen; i++ {
			if len(t[i]) > 32 {
				dst = append(dst, t[i][:32]...)
			} else {
				dst = append(dst, t[i][:]...)
				if len(t[i]) < 32 {
					dst = sszutils.AppendZeroPadding(dst, 32-len(t[i]))
				}
			}
		}
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, (int(limit)-vlen)*32)
		}
		return err
	}
	fn9 := func(t *phase0.DepositData) (err error) { // *phase0.DepositData
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn10 := func(t *phase0.Deposit) (err error) { // *phase0.Deposit
		// Field #0 'Proof'
		if err = fn8(t.Proof); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = fn9(t.Data); err != nil {
			return err
		}
		return err
	}
	fn11 := func(t []*phase0.Deposit) (err error) { // []*phase0.Deposit
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			if err = fn10(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn12 := func(t *phase0.SignedVoluntaryExit) (err error) { // *phase0.SignedVoluntaryExit
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn13 := func(t []*phase0.SignedVoluntaryExit) (err error) { // []*phase0.SignedVoluntaryExit
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			if err = fn12(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn14 := func(t go_bitfield.Bitvector512) (err error) { // bitfield.Bitvector512:64:SYNC_COMMITTEE_SIZE/8
		hasLimit, limit, err := ds.ResolveSpecValue("SYNC_COMMITTEE_SIZE/8")
		if err != nil {
			return err
		}
		if !hasLimit {
			limit = 64
		}
		vlen := len(t)
		if vlen > int(limit) {
			return sszutils.ErrListTooBig
		}
		vlimit := int(limit)
		if vlimit > vlen {
			vlimit = vlen
		}
		dst = append(dst, t[:vlimit]...)
		if vlen < int(limit) {
			dst = sszutils.AppendZeroPadding(dst, int(limit)-vlen)
		}
		return err
	}
	fn15 := func(t *altair.SyncAggregate) (err error) { // *altair.SyncAggregate
		// Field #0 'SyncCommitteeBits'
		if err = fn14(t.SyncCommitteeBits); err != nil {
			return err
		}
		// Field #1 'SyncCommitteeSignature'
		dst = append(dst, t.SyncCommitteeSignature[:]...)
		return err
	}
	fn16 := func(t *deneb.ExecutionPayload) (err error) { // *deneb.ExecutionPayload
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn17 := func(t *capella.SignedBLSToExecutionChange) (err error) { // *capella.SignedBLSToExecutionChange
		dst, err = t.MarshalSSZTo(dst)
		return err
	}
	fn18 := func(t []*capella.SignedBLSToExecutionChange) (err error) { // []*capella.SignedBLSToExecutionChange
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			if err = fn17(t[i]); err != nil {
				return err
			}
		}
		return err
	}
	fn19 := func(t []deneb.KZGCommitment) (err error) { // []deneb.KZGCommitment:48
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			dst = append(dst, t[i][:]...)
		}
		return err
	}
	fn20 := func(t *deneb.BeaconBlockBody) (err error) { // *deneb.BeaconBlockBody
		dstlen := len(dst)
		// Field #0 'RANDAOReveal'
		dst = append(dst, t.RANDAOReveal[:]...)
		// Field #1 'ETH1Data'
		if err = fn1(t.ETH1Data); err != nil {
			return err
		}
		// Field #2 'Graffiti'
		dst = append(dst, t.Graffiti[:]...)
		// Offset #3 'ProposerSlashings'
		offset3 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #4 'AttesterSlashings'
		offset4 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #5 'Attestations'
		offset5 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #6 'Deposits'
		offset6 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #7 'VoluntaryExits'
		offset7 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Field #8 'SyncAggregate'
		if err = fn15(t.SyncAggregate); err != nil {
			return err
		}
		// Offset #9 'ExecutionPayload'
		offset9 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #10 'BLSToExecutionChanges'
		offset10 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #11 'BlobKZGCommitments'
		offset11 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Dynamic Field #3 'ProposerSlashings'
		sszutils.UpdateOffset(dst[offset3:offset3+4], len(dst)-dstlen)
		if err = fn3(t.ProposerSlashings); err != nil {
			return err
		}
		// Dynamic Field #4 'AttesterSlashings'
		sszutils.UpdateOffset(dst[offset4:offset4+4], len(dst)-dstlen)
		if err = fn5(t.AttesterSlashings); err != nil {
			return err
		}
		// Dynamic Field #5 'Attestations'
		sszutils.UpdateOffset(dst[offset5:offset5+4], len(dst)-dstlen)
		if err = fn7(t.Attestations); err != nil {
			return err
		}
		// Dynamic Field #6 'Deposits'
		sszutils.UpdateOffset(dst[offset6:offset6+4], len(dst)-dstlen)
		if err = fn11(t.Deposits); err != nil {
			return err
		}
		// Dynamic Field #7 'VoluntaryExits'
		sszutils.UpdateOffset(dst[offset7:offset7+4], len(dst)-dstlen)
		if err = fn13(t.VoluntaryExits); err != nil {
			return err
		}
		// Dynamic Field #9 'ExecutionPayload'
		sszutils.UpdateOffset(dst[offset9:offset9+4], len(dst)-dstlen)
		if err = fn16(t.ExecutionPayload); err != nil {
			return err
		}
		// Dynamic Field #10 'BLSToExecutionChanges'
		sszutils.UpdateOffset(dst[offset10:offset10+4], len(dst)-dstlen)
		if err = fn18(t.BLSToExecutionChanges); err != nil {
			return err
		}
		// Dynamic Field #11 'BlobKZGCommitments'
		sszutils.UpdateOffset(dst[offset11:offset11+4], len(dst)-dstlen)
		if err = fn19(t.BlobKZGCommitments); err != nil {
			return err
		}
		return err
	}
	fn21 := func(t *TestBeaconBlock) (err error) { // *main.TestBeaconBlock
		dstlen := len(dst)
		// Field #0 'Slot'
		dst = sszutils.MarshalUint64(dst, uint64(t.Slot))
		// Field #1 'ProposerIndex'
		dst = sszutils.MarshalUint64(dst, uint64(t.ProposerIndex))
		// Field #2 'ParentRoot'
		dst = append(dst, t.ParentRoot[:]...)
		// Field #3 'StateRoot'
		dst = append(dst, t.StateRoot[:]...)
		// Offset #4 'Body'
		offset4 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Dynamic Field #4 'Body'
		sszutils.UpdateOffset(dst[offset4:offset4+4], len(dst)-dstlen)
		if err = fn20(t.Body); err != nil {
			return err
		}
		return err
	}
	err = fn21(t)
	return dst, err
}
func (t *TestBeaconBlock) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *TestBeaconBlock) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	return t.MarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *TestBeaconBlock) SizeSSZDyn(ds sszutils.DynamicSpecs) (size int) {
	sfn1 := func(t []*phase0.ProposerSlashing) (size int) { // []*phase0.ProposerSlashing
		size += len(t) * 416
		return size
	}
	sfn2 := func(t *phase0.AttesterSlashing) (size int) { // *phase0.AttesterSlashing
		size = t.SizeSSZ()
		return size
	}
	sfn3 := func(t []*phase0.AttesterSlashing) (size int) { // []*phase0.AttesterSlashing
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			size += 4 + sfn2(t[i])
		}
		return size
	}
	sfn4 := func(t *phase0.Attestation) (size int) { // *phase0.Attestation
		size = t.SizeSSZ()
		return size
	}
	sfn5 := func(t []*phase0.Attestation) (size int) { // []*phase0.Attestation
		vlen := len(t)
		for i := 0; i < vlen; i++ {
			size += 4 + sfn4(t[i])
		}
		return size
	}
	sfn6 := func(t [][]byte) (size int) { // [][]byte:33:DEPOSIT_CONTRACT_TREE_DEPTH+1:32
		hasLimit, limit, _ := ds.ResolveSpecValue("DEPOSIT_CONTRACT_TREE_DEPTH+1")
		if !hasLimit {
			limit = 33
		}
		size += int(limit) * 32
		return size
	}
	sfn7 := func(t *phase0.Deposit) (size int) { // *phase0.Deposit
		size = 184
		size += sfn6(t.Proof)
		return size
	}
	sfn8 := func(t []*phase0.Deposit) (size int) { // []*phase0.Deposit
		if len(t) > 0 {
			size += len(t) * sfn7(t[0])
		}
		return size
	}
	sfn9 := func(t []*phase0.SignedVoluntaryExit) (size int) { // []*phase0.SignedVoluntaryExit
		size += len(t) * 112
		return size
	}
	sfn10 := func(t go_bitfield.Bitvector512) (size int) { // go_bitfield.Bitvector512:64:SYNC_COMMITTEE_SIZE/8
		hasLimit, limit, _ := ds.ResolveSpecValue("SYNC_COMMITTEE_SIZE/8")
		if !hasLimit {
			limit = 64
		}
		size += int(limit) * 1
		return size
	}
	sfn11 := func(t *altair.SyncAggregate) (size int) { // *altair.SyncAggregate
		size = 96
		size += sfn10(t.SyncCommitteeBits)
		return size
	}
	sfn12 := func(t *deneb.ExecutionPayload) (size int) { // *deneb.ExecutionPayload
		size = t.SizeSSZ()
		return size
	}
	sfn13 := func(t []*capella.SignedBLSToExecutionChange) (size int) { // []*capella.SignedBLSToExecutionChange
		size += len(t) * 172
		return size
	}
	sfn14 := func(t []deneb.KZGCommitment) (size int) { // []deneb.KZGCommitment:48
		size += len(t) * 48
		return size
	}
	sfn15 := func(t *deneb.BeaconBlockBody) (size int) { // *deneb.BeaconBlockBody
		size = 200
		size += 4 + sfn1(t.ProposerSlashings)
		size += 4 + sfn3(t.AttesterSlashings)
		size += 4 + sfn5(t.Attestations)
		size += 4 + sfn8(t.Deposits)
		size += 4 + sfn9(t.VoluntaryExits)
		size += sfn11(t.SyncAggregate)
		size += 4 + sfn12(t.ExecutionPayload)
		size += 4 + sfn13(t.BLSToExecutionChanges)
		size += 4 + sfn14(t.BlobKZGCommitments)
		return size
	}
	sfn16 := func(t *TestBeaconBlock) (size int) { // *TestBeaconBlock
		size = 80
		size += 4 + sfn15(t.Body)
		return size
	}
	return sfn16(t)
}
func (t *TestBeaconBlock) SizeSSZ() (size int) {
	return t.SizeSSZDyn(dynssz.GetGlobalDynSsz())
}

func (t *TestBeaconBlock) UnmarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (err error) {
	sfn1 := func() (size int) { // [][]byte:33:DEPOSIT_CONTRACT_TREE_DEPTH+1:32
		hasLimit, limit, _ := ds.ResolveSpecValue("DEPOSIT_CONTRACT_TREE_DEPTH+1")
		if !hasLimit {
			limit = 33
		}
		size += int(limit) * 32
		return size
	}()
	sfn2 := func() (size int) { // *phase0.Deposit
		size = 184
		size += sfn1
		return size
	}()
	sfn3 := func() (size int) { // go_bitfield.Bitvector512:64:SYNC_COMMITTEE_SIZE/8
		hasLimit, limit, _ := ds.ResolveSpecValue("SYNC_COMMITTEE_SIZE/8")
		if !hasLimit {
			limit = 64
		}
		size += int(limit) * 1
		return size
	}()
	sfn4 := func() (size int) { // *altair.SyncAggregate
		size = 96
		size += sfn3
		return size
	}()
	fn1 := func(t *phase0.ETH1Data, buf []byte) (*phase0.ETH1Data, error) { // *phase0.ETH1Data
		var err error
		if t == nil {
			t = new(phase0.ETH1Data)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn2 := func(t *phase0.ProposerSlashing, buf []byte) (*phase0.ProposerSlashing, error) { // *phase0.ProposerSlashing
		var err error
		if t == nil {
			t = new(phase0.ProposerSlashing)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn3 := func(t []*phase0.ProposerSlashing, buf []byte) ([]*phase0.ProposerSlashing, error) { // []*phase0.ProposerSlashing
		var err error
		buflen := len(buf)
		itemsize := 416
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*phase0.ProposerSlashing, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if t[i], err = fn2(t[i], buf[i*itemsize:(i+1)*itemsize]); err != nil {
				return t, err
			}
		}
		return t, err
	}
	fn4 := func(t *phase0.AttesterSlashing, buf []byte) (*phase0.AttesterSlashing, error) { // *phase0.AttesterSlashing
		var err error
		if t == nil {
			t = new(phase0.AttesterSlashing)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn5 := func(t []*phase0.AttesterSlashing, buf []byte) ([]*phase0.AttesterSlashing, error) { // []*phase0.AttesterSlashing
		var err error
		buflen := len(buf)
		if buflen == 0 {
			return t, nil
		}
		if buflen < 4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		offset := int(sszutils.ReadOffset(buf[0:4]))
		itemCount := offset / 4
		if buflen < itemCount*4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*phase0.AttesterSlashing, itemCount)
		} else {
			t = t[:itemCount]
		}
		var endOffset int
		for i := 0; i < itemCount; i++ {
			if i < itemCount-1 {
				endOffset = int(sszutils.ReadOffset(buf[(i+1)*4 : (i+2)*4]))
			} else {
				endOffset = buflen
			}
			if endOffset < offset || endOffset > buflen {
				return t, sszutils.ErrOffset
			}
			if t[i], err = fn4(t[i], buf[offset:endOffset]); err != nil {
				return t, err
			}
			offset = endOffset
		}
		return t, err
	}
	fn6 := func(t *phase0.Attestation, buf []byte) (*phase0.Attestation, error) { // *phase0.Attestation
		var err error
		if t == nil {
			t = new(phase0.Attestation)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn7 := func(t []*phase0.Attestation, buf []byte) ([]*phase0.Attestation, error) { // []*phase0.Attestation
		var err error
		buflen := len(buf)
		if buflen == 0 {
			return t, nil
		}
		if buflen < 4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		offset := int(sszutils.ReadOffset(buf[0:4]))
		itemCount := offset / 4
		if buflen < itemCount*4 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*phase0.Attestation, itemCount)
		} else {
			t = t[:itemCount]
		}
		var endOffset int
		for i := 0; i < itemCount; i++ {
			if i < itemCount-1 {
				endOffset = int(sszutils.ReadOffset(buf[(i+1)*4 : (i+2)*4]))
			} else {
				endOffset = buflen
			}
			if endOffset < offset || endOffset > buflen {
				return t, sszutils.ErrOffset
			}
			if t[i], err = fn6(t[i], buf[offset:endOffset]); err != nil {
				return t, err
			}
			offset = endOffset
		}
		return t, err
	}
	fn8 := func(t [][]byte, buf []byte) ([][]byte, error) { // [][]byte:33:DEPOSIT_CONTRACT_TREE_DEPTH+1:32
		var err error
		itemsize := 32
		limit := sfn1 / itemsize
		if len(t) < int(limit) {
			t = make([][]byte, int(limit))
		} else {
			t = t[:int(limit)]
		}
		if len(buf) > int(limit)*itemsize {
			return t, sszutils.ErrListTooBig
		}
		for i := 0; i < int(limit); i++ {
			if len(t[i]) < 32 {
				t[i] = make([]byte, 32)
			} else {
				t[i] = t[i][:32]
			}
			copy(t[i][:], buf[i*itemsize:(i+1)*itemsize])
		}
		return t, err
	}
	fn9 := func(t *phase0.DepositData, buf []byte) (*phase0.DepositData, error) { // *phase0.DepositData
		var err error
		if t == nil {
			t = new(phase0.DepositData)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn10 := func(t *phase0.Deposit, buf []byte) (*phase0.Deposit, error) { // *phase0.Deposit
		var err error
		if t == nil {
			t = new(phase0.Deposit)
		}
		bufpos := 0
		buflen := len(buf)
		minsize := 184
		if buflen < minsize {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'Proof'
		{
			fieldsize := sfn1
			minsize += fieldsize
			if buflen < minsize {
				return t, sszutils.ErrUnexpectedEOF
			}
			if t.Proof, err = fn8(t.Proof, buf[bufpos:bufpos+fieldsize]); err != nil {
				return t, err
			}
			bufpos += fieldsize
		}
		// Field #1 'Data'
		{
			fieldsize := 184
			if t.Data, err = fn9(t.Data, buf[bufpos:bufpos+fieldsize]); err != nil {
				return t, err
			}
			bufpos += fieldsize
		}
		return t, err
	}
	fn11 := func(t []*phase0.Deposit, buf []byte) ([]*phase0.Deposit, error) { // []*phase0.Deposit
		var err error
		buflen := len(buf)
		itemsize := sfn2
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*phase0.Deposit, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if t[i], err = fn10(t[i], buf[i*itemsize:(i+1)*itemsize]); err != nil {
				return t, err
			}
		}
		return t, err
	}
	fn12 := func(t *phase0.SignedVoluntaryExit, buf []byte) (*phase0.SignedVoluntaryExit, error) { // *phase0.SignedVoluntaryExit
		var err error
		if t == nil {
			t = new(phase0.SignedVoluntaryExit)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn13 := func(t []*phase0.SignedVoluntaryExit, buf []byte) ([]*phase0.SignedVoluntaryExit, error) { // []*phase0.SignedVoluntaryExit
		var err error
		buflen := len(buf)
		itemsize := 112
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*phase0.SignedVoluntaryExit, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if t[i], err = fn12(t[i], buf[i*itemsize:(i+1)*itemsize]); err != nil {
				return t, err
			}
		}
		return t, err
	}
	fn14 := func(t go_bitfield.Bitvector512, buf []byte) (go_bitfield.Bitvector512, error) { // go_bitfield.Bitvector512:64:SYNC_COMMITTEE_SIZE/8
		var err error
		itemsize := 1
		limit := sfn3 / itemsize
		if len(t) < int(limit) {
			t = make(go_bitfield.Bitvector512, int(limit))
		} else {
			t = t[:int(limit)]
		}
		if len(buf) > int(limit)*itemsize {
			return t, sszutils.ErrListTooBig
		}
		copy(t[:], buf)
		return t, err
	}
	fn15 := func(t *altair.SyncAggregate, buf []byte) (*altair.SyncAggregate, error) { // *altair.SyncAggregate
		var err error
		if t == nil {
			t = new(altair.SyncAggregate)
		}
		bufpos := 0
		buflen := len(buf)
		minsize := 96
		if buflen < minsize {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'SyncCommitteeBits'
		{
			fieldsize := sfn3
			minsize += fieldsize
			if buflen < minsize {
				return t, sszutils.ErrUnexpectedEOF
			}
			if t.SyncCommitteeBits, err = fn14(t.SyncCommitteeBits, buf[bufpos:bufpos+fieldsize]); err != nil {
				return t, err
			}
			bufpos += fieldsize
		}
		// Field #1 'SyncCommitteeSignature'
		{
			fieldsize := 96
			copy(t.SyncCommitteeSignature[:], buf[bufpos:bufpos+fieldsize])
			bufpos += fieldsize
		}
		return t, err
	}
	fn16 := func(t *deneb.ExecutionPayload, buf []byte) (*deneb.ExecutionPayload, error) { // *deneb.ExecutionPayload
		var err error
		if t == nil {
			t = new(deneb.ExecutionPayload)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn17 := func(t *capella.SignedBLSToExecutionChange, buf []byte) (*capella.SignedBLSToExecutionChange, error) { // *capella.SignedBLSToExecutionChange
		var err error
		if t == nil {
			t = new(capella.SignedBLSToExecutionChange)
		}
		err = t.UnmarshalSSZ(buf)
		return t, err
	}
	fn18 := func(t []*capella.SignedBLSToExecutionChange, buf []byte) ([]*capella.SignedBLSToExecutionChange, error) { // []*capella.SignedBLSToExecutionChange
		var err error
		buflen := len(buf)
		itemsize := 172
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]*capella.SignedBLSToExecutionChange, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			if t[i], err = fn17(t[i], buf[i*itemsize:(i+1)*itemsize]); err != nil {
				return t, err
			}
		}
		return t, err
	}
	fn19 := func(t []deneb.KZGCommitment, buf []byte) ([]deneb.KZGCommitment, error) { // []deneb.KZGCommitment:48
		var err error
		buflen := len(buf)
		itemsize := 48
		itemCount := buflen / itemsize
		if buflen%itemsize != 0 {
			return t, sszutils.ErrUnexpectedEOF
		}
		if len(t) < itemCount {
			t = make([]deneb.KZGCommitment, itemCount)
		} else {
			t = t[:itemCount]
		}
		for i := 0; i < itemCount; i++ {
			copy(t[i][:], buf[i*itemsize:(i+1)*itemsize])
		}
		return t, err
	}
	fn20 := func(t *deneb.BeaconBlockBody, buf []byte) (*deneb.BeaconBlockBody, error) { // *deneb.BeaconBlockBody
		var err error
		if t == nil {
			t = new(deneb.BeaconBlockBody)
		}
		bufpos := 0
		buflen := len(buf)
		minsize := 232
		if buflen < minsize {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Field #0 'RANDAOReveal'
		{
			fieldsize := 96
			copy(t.RANDAOReveal[:], buf[bufpos:bufpos+fieldsize])
			bufpos += fieldsize
		}
		// Field #1 'ETH1Data'
		{
			fieldsize := 72
			if t.ETH1Data, err = fn1(t.ETH1Data, buf[bufpos:bufpos+fieldsize]); err != nil {
				return t, err
			}
			bufpos += fieldsize
		}
		// Field #2 'Graffiti'
		{
			fieldsize := 32
			copy(t.Graffiti[:], buf[bufpos:bufpos+fieldsize])
			bufpos += fieldsize
		}
		// Offset #3 'ProposerSlashings'
		offset3 := int(sszutils.ReadOffset(buf[bufpos : bufpos+4]))
		bufpos += 4
		// Offset #4 'AttesterSlashings'
		offset4 := int(sszutils.ReadOffset(buf[bufpos : bufpos+4]))
		bufpos += 4
		// Offset #5 'Attestations'
		offset5 := int(sszutils.ReadOffset(buf[bufpos : bufpos+4]))
		bufpos += 4
		// Offset #6 'Deposits'
		offset6 := int(sszutils.ReadOffset(buf[bufpos : bufpos+4]))
		bufpos += 4
		// Offset #7 'VoluntaryExits'
		offset7 := int(sszutils.ReadOffset(buf[bufpos : bufpos+4]))
		bufpos += 4
		// Field #8 'SyncAggregate'
		{
			fieldsize := sfn4
			minsize += fieldsize
			if buflen < minsize {
				return t, sszutils.ErrUnexpectedEOF
			}
			if t.SyncAggregate, err = fn15(t.SyncAggregate, buf[bufpos:bufpos+fieldsize]); err != nil {
				return t, err
			}
			bufpos += fieldsize
		}
		// Offset #9 'ExecutionPayload'
		offset9 := int(sszutils.ReadOffset(buf[bufpos : bufpos+4]))
		bufpos += 4
		// Offset #10 'BLSToExecutionChanges'
		offset10 := int(sszutils.ReadOffset(buf[bufpos : bufpos+4]))
		bufpos += 4
		// Offset #11 'BlobKZGCommitments'
		offset11 := int(sszutils.ReadOffset(buf[bufpos : bufpos+4]))
		bufpos += 4
		// Dynamic Field #3 'ProposerSlashings'
		if offset3 < bufpos || offset4 > buflen || offset4 < offset3 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset3:offset4]
			if t.ProposerSlashings, err = fn3(t.ProposerSlashings, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #4 'AttesterSlashings'
		if offset4 < bufpos || offset5 > buflen || offset5 < offset4 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset4:offset5]
			if t.AttesterSlashings, err = fn5(t.AttesterSlashings, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #5 'Attestations'
		if offset5 < bufpos || offset6 > buflen || offset6 < offset5 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset5:offset6]
			if t.Attestations, err = fn7(t.Attestations, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #6 'Deposits'
		if offset6 < bufpos || offset7 > buflen || offset7 < offset6 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset6:offset7]
			if t.Deposits, err = fn11(t.Deposits, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #7 'VoluntaryExits'
		if offset7 < bufpos || offset9 > buflen || offset9 < offset7 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset7:offset9]
			if t.VoluntaryExits, err = fn13(t.VoluntaryExits, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #9 'ExecutionPayload'
		if offset9 < bufpos || offset10 > buflen || offset10 < offset9 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset9:offset10]
			if t.ExecutionPayload, err = fn16(t.ExecutionPayload, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #10 'BLSToExecutionChanges'
		if offset10 < bufpos || offset11 > buflen || offset11 < offset10 {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset10:offset11]
			if t.BLSToExecutionChanges, err = fn18(t.BLSToExecutionChanges, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		// Dynamic Field #11 'BlobKZGCommitments'
		if offset11 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset11:]
			if t.BlobKZGCommitments, err = fn19(t.BlobKZGCommitments, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	fn21 := func(t *TestBeaconBlock, buf []byte) (*TestBeaconBlock, error) { // *TestBeaconBlock
		var err error
		if t == nil {
			t = new(TestBeaconBlock)
		}
		bufpos := 84
		buflen := len(buf)
		if buflen < 84 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Read offset #4 'Body'
		offset4 := int(sszutils.ReadOffset(buf[80:84]))
		// Field #0 'Slot'
		t.Slot = (phase0.Slot)(sszutils.UnmarshallUint64(buf[0:8]))
		// Field #1 'ProposerIndex'
		t.ProposerIndex = (phase0.ValidatorIndex)(sszutils.UnmarshallUint64(buf[8:16]))
		// Field #2 'ParentRoot'
		copy(t.ParentRoot[:], buf[16:48])
		// Field #3 'StateRoot'
		copy(t.StateRoot[:], buf[48:80])
		// Dynamic Field #4 'Body'
		if offset4 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset4:]
			if t.Body, err = fn20(t.Body, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	_, err = fn21(t, buf)
	return err
}
func (t *TestBeaconBlock) UnmarshalSSZ(buf []byte) (err error) {
	return t.UnmarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *TestBeaconBlock) HashTreeRootWithDyn(ds sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	fn1 := func(t []*phase0.ProposerSlashing) (err error) { // []*phase0.ProposerSlashing:MAX_PROPOSER_SLASHINGS
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_PROPOSER_SLASHINGS")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 16
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn2 := func(t []*phase0.AttesterSlashing) (err error) { // []*phase0.AttesterSlashing:MAX_ATTESTER_SLASHINGS
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_ATTESTER_SLASHINGS")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 2
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn3 := func(t go_bitfield.Bitlist) (err error) { // bitfield.Bitlist:MAX_VALIDATORS_PER_COMMITTEE
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_VALIDATORS_PER_COMMITTEE")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 2048
		}
		var size uint64
		var bitlist []byte
		hh.WithTemp(func(tmp []byte) []byte {
			tmp, size = hasher.ParseBitlist(tmp[:0], t[:])
			bitlist = tmp
			return tmp
		})
		if size > maxLen {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		hh.AppendBytes32(bitlist)
		hh.MerkleizeWithMixin(idx, size, (maxLen+255)/256)
		return err
	}
	fn4 := func(t *phase0.Attestation) (err error) { // *phase0.Attestation:pack
		idx := hh.Index()
		// Field #0 'AggregationBits'
		if err = fn3(t.AggregationBits); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = t.Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Signature'
		hh.PutBytes(t.Signature[:])
		hh.Merkleize(idx)
		return err
	}
	fn5 := func(t []*phase0.Attestation) (err error) { // []*phase0.Attestation:MAX_ATTESTATIONS
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_ATTESTATIONS")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 128
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn4(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn6 := func(t [][]byte) (err error) { // [][]uint8:33:DEPOSIT_CONTRACT_TREE_DEPTH+1:32
		hasLimit, limit, err := ds.ResolveSpecValue("DEPOSIT_CONTRACT_TREE_DEPTH+1")
		if err != nil {
			return err
		}
		if !hasLimit {
			limit = 33
		}
		idx := hh.Index()
		vlen := len(t)
		if vlen > int(limit) {
			return sszutils.ErrVectorLength
		}
		for i := 0; i < vlen; i++ {
			hh.PutBytes(t[i][:])
		}
		for i := vlen; i < int(limit); i++ {
			hh.PutUint8(0)
		}
		hh.Merkleize(idx)
		return err
	}
	fn7 := func(t *phase0.Deposit) (err error) { // *phase0.Deposit:pack
		idx := hh.Index()
		// Field #0 'Proof'
		if err = fn6(t.Proof); err != nil {
			return err
		}
		// Field #1 'Data'
		if err = t.Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn8 := func(t []*phase0.Deposit) (err error) { // []*phase0.Deposit:MAX_DEPOSITS
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_DEPOSITS")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 16
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn7(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn9 := func(t []*phase0.SignedVoluntaryExit) (err error) { // []*phase0.SignedVoluntaryExit:MAX_VOLUNTARY_EXITS
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_VOLUNTARY_EXITS")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 16
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn10 := func(t go_bitfield.Bitvector512) (err error) { // bitfield.Bitvector512:64:SYNC_COMMITTEE_SIZE/8
		hasLimit, limit, err := ds.ResolveSpecValue("SYNC_COMMITTEE_SIZE/8")
		if err != nil {
			return err
		}
		if !hasLimit {
			limit = 64
		}
		if len(t) != int(limit) {
			return sszutils.ErrVectorLength
		}
		hh.PutBytes(t[:])
		return err
	}
	fn11 := func(t *altair.SyncAggregate) (err error) { // *altair.SyncAggregate
		idx := hh.Index()
		// Field #0 'SyncCommitteeBits'
		if err = fn10(t.SyncCommitteeBits); err != nil {
			return err
		}
		// Field #1 'SyncCommitteeSignature'
		hh.PutBytes(t.SyncCommitteeSignature[:])
		hh.Merkleize(idx)
		return err
	}
	fn12 := func(t []byte) (err error) { // []uint8:MAX_EXTRA_DATA_BYTES
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_EXTRA_DATA_BYTES")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 32
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		hh.AppendBytes32(t[:vlen])
		limit := sszutils.CalculateLimit(uint64(maxLen), uint64(vlen), uint64(1))
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn13 := func(t *uint256.Int) (err error) { // *uint256.Int:4
		var root [32]byte
		if root, err = t.HashTreeRoot(); err == nil {
			hh.Append(root[:])
		}
		return err
	}
	fn14 := func(t bellatrix.Transaction) (err error) { // bellatrix.Transaction:MAX_BYTES_PER_TRANSACTION:pack
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_BYTES_PER_TRANSACTION")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 1073741824
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		hh.AppendBytes32(t[:vlen])
		limit := sszutils.CalculateLimit(uint64(maxLen), uint64(vlen), uint64(1))
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn15 := func(t []bellatrix.Transaction) (err error) { // []bellatrix.Transaction:MAX_TRANSACTIONS_PER_PAYLOAD:MAX_BYTES_PER_TRANSACTION
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_TRANSACTIONS_PER_PAYLOAD")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 1048576
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = fn14(t[i]); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn16 := func(t []*capella.Withdrawal) (err error) { // []*capella.Withdrawal:MAX_WITHDRAWALS_PER_PAYLOAD
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_WITHDRAWALS_PER_PAYLOAD")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 16
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn17 := func(t *deneb.ExecutionPayload) (err error) { // *deneb.ExecutionPayload
		idx := hh.Index()
		// Field #0 'ParentHash'
		hh.PutBytes(t.ParentHash[:])
		// Field #1 'FeeRecipient'
		hh.PutBytes(t.FeeRecipient[:])
		// Field #2 'StateRoot'
		hh.PutBytes(t.StateRoot[:])
		// Field #3 'ReceiptsRoot'
		hh.PutBytes(t.ReceiptsRoot[:])
		// Field #4 'LogsBloom'
		hh.PutBytes(t.LogsBloom[:])
		// Field #5 'PrevRandao'
		hh.PutBytes(t.PrevRandao[:])
		// Field #6 'BlockNumber'
		hh.PutUint64(uint64(t.BlockNumber))
		// Field #7 'GasLimit'
		hh.PutUint64(uint64(t.GasLimit))
		// Field #8 'GasUsed'
		hh.PutUint64(uint64(t.GasUsed))
		// Field #9 'Timestamp'
		hh.PutUint64(uint64(t.Timestamp))
		// Field #10 'ExtraData'
		if err = fn12(t.ExtraData); err != nil {
			return err
		}
		// Field #11 'BaseFeePerGas'
		if err = fn13(t.BaseFeePerGas); err != nil {
			return err
		}
		// Field #12 'BlockHash'
		hh.PutBytes(t.BlockHash[:])
		// Field #13 'Transactions'
		if err = fn15(t.Transactions); err != nil {
			return err
		}
		// Field #14 'Withdrawals'
		if err = fn16(t.Withdrawals); err != nil {
			return err
		}
		// Field #15 'BlobGasUsed'
		hh.PutUint64(uint64(t.BlobGasUsed))
		// Field #16 'ExcessBlobGas'
		hh.PutUint64(uint64(t.ExcessBlobGas))
		hh.Merkleize(idx)
		return err
	}
	fn18 := func(t []*capella.SignedBLSToExecutionChange) (err error) { // []*capella.SignedBLSToExecutionChange:MAX_BLS_TO_EXECUTION_CHANGES
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_BLS_TO_EXECUTION_CHANGES")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 16
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			if err = t[i].HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn19 := func(t []deneb.KZGCommitment) (err error) { // []deneb.KZGCommitment:MAX_BLOB_COMMITMENTS_PER_BLOCK:48
		hasLimit, maxLen, err := ds.ResolveSpecValue("MAX_BLOB_COMMITMENTS_PER_BLOCK")
		if err != nil {
			return err
		}
		if !hasLimit {
			maxLen = 4096
		}
		vlen := len(t)
		if vlen > int(maxLen) {
			return sszutils.ErrListTooBig
		}
		idx := hh.Index()
		for i := 0; i < vlen; i++ {
			hh.PutBytes(t[i][:])
		}
		limit := uint64(maxLen)
		if (uint64(hh.Index()-idx)+31)/32 > limit {
			return sszutils.ErrListTooBig
		}
		hh.MerkleizeWithMixin(idx, uint64(vlen), limit)
		return err
	}
	fn20 := func(t *deneb.BeaconBlockBody) (err error) { // *deneb.BeaconBlockBody
		idx := hh.Index()
		// Field #0 'RANDAOReveal'
		hh.PutBytes(t.RANDAOReveal[:])
		// Field #1 'ETH1Data'
		if err = t.ETH1Data.HashTreeRootWith(hh); err != nil {
			return err
		}
		// Field #2 'Graffiti'
		hh.PutBytes(t.Graffiti[:])
		// Field #3 'ProposerSlashings'
		if err = fn1(t.ProposerSlashings); err != nil {
			return err
		}
		// Field #4 'AttesterSlashings'
		if err = fn2(t.AttesterSlashings); err != nil {
			return err
		}
		// Field #5 'Attestations'
		if err = fn5(t.Attestations); err != nil {
			return err
		}
		// Field #6 'Deposits'
		if err = fn8(t.Deposits); err != nil {
			return err
		}
		// Field #7 'VoluntaryExits'
		if err = fn9(t.VoluntaryExits); err != nil {
			return err
		}
		// Field #8 'SyncAggregate'
		if err = fn11(t.SyncAggregate); err != nil {
			return err
		}
		// Field #9 'ExecutionPayload'
		if err = fn17(t.ExecutionPayload); err != nil {
			return err
		}
		// Field #10 'BLSToExecutionChanges'
		if err = fn18(t.BLSToExecutionChanges); err != nil {
			return err
		}
		// Field #11 'BlobKZGCommitments'
		if err = fn19(t.BlobKZGCommitments); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	fn21 := func(t *TestBeaconBlock) (err error) { // *main.TestBeaconBlock
		idx := hh.Index()
		// Field #0 'Slot'
		hh.PutUint64(uint64(t.Slot))
		// Field #1 'ProposerIndex'
		hh.PutUint64(uint64(t.ProposerIndex))
		// Field #2 'ParentRoot'
		hh.PutBytes(t.ParentRoot[:])
		// Field #3 'StateRoot'
		hh.PutBytes(t.StateRoot[:])
		// Field #4 'Body'
		if err = fn20(t.Body); err != nil {
			return err
		}
		hh.Merkleize(idx)
		return err
	}
	return fn21(t)
}
func (t *TestBeaconBlock) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *TestBeaconBlock) HashTreeRootWith(hh sszutils.HashWalker) error {
	return t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh)
}
func (t *TestBeaconBlock) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}

func (t *TestSignedBeaconBlock) MarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	dst = buf
	fn1 := func(t *TestBeaconBlock) (err error) { // *main.TestBeaconBlock
		dst, err = t.MarshalSSZDyn(ds, dst)
		return err
	}
	fn2 := func(t *TestSignedBeaconBlock) (err error) { // *main.TestSignedBeaconBlock
		dstlen := len(dst)
		// Offset #0 'Message'
		offset0 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Field #1 'Signature'
		dst = append(dst, t.Signature[:]...)
		// Dynamic Field #0 'Message'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		if err = fn1(t.Message); err != nil {
			return err
		}
		return err
	}
	err = fn2(t)
	return dst, err
}
func (t *TestSignedBeaconBlock) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *TestSignedBeaconBlock) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	return t.MarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *TestSignedBeaconBlock) SizeSSZDyn(ds sszutils.DynamicSpecs) (size int) {
	sfn1 := func(t *TestBeaconBlock) (size int) { // *TestBeaconBlock
		size = t.SizeSSZDyn(ds)
		return size
	}
	sfn2 := func(t *TestSignedBeaconBlock) (size int) { // *TestSignedBeaconBlock
		size = 96
		size += 4 + sfn1(t.Message)
		return size
	}
	return sfn2(t)
}
func (t *TestSignedBeaconBlock) SizeSSZ() (size int) {
	return t.SizeSSZDyn(dynssz.GetGlobalDynSsz())
}

func (t *TestSignedBeaconBlock) UnmarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (err error) {
	fn1 := func(t *TestBeaconBlock, buf []byte) (*TestBeaconBlock, error) { // *TestBeaconBlock
		var err error
		if t == nil {
			t = new(TestBeaconBlock)
		}
		err = t.UnmarshalSSZDyn(ds, buf)
		return t, err
	}
	fn2 := func(t *TestSignedBeaconBlock, buf []byte) (*TestSignedBeaconBlock, error) { // *TestSignedBeaconBlock
		var err error
		if t == nil {
			t = new(TestSignedBeaconBlock)
		}
		bufpos := 100
		buflen := len(buf)
		if buflen < 100 {
			return t, sszutils.ErrUnexpectedEOF
		}
		// Read offset #0 'Message'
		offset0 := int(sszutils.ReadOffset(buf[0:4]))
		// Field #1 'Signature'
		copy(t.Signature[:], buf[4:100])
		// Dynamic Field #0 'Message'
		if offset0 < bufpos {
			return t, sszutils.ErrOffset
		}
		{
			fieldSlice := buf[offset0:]
			if t.Message, err = fn1(t.Message, fieldSlice); err != nil {
				return t, err
			}
			bufpos += len(fieldSlice)
		}
		return t, err
	}
	_, err = fn2(t, buf)
	return err
}
func (t *TestSignedBeaconBlock) UnmarshalSSZ(buf []byte) (err error) {
	return t.UnmarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *TestSignedBeaconBlock) HashTreeRootWithDyn(ds sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	fn1 := func(t *TestBeaconBlock) (err error) { // *main.TestBeaconBlock
		err = t.HashTreeRootWithDyn(ds, hh)
		return err
	}
	fn2 := func(t *TestSignedBeaconBlock) (err error) { // *main.TestSignedBeaconBlock
		idx := hh.Index()
		// Field #0 'Message'
		if err = fn1(t.Message); err != nil {
			return err
		}
		// Field #1 'Signature'
		hh.PutBytes(t.Signature[:])
		hh.Merkleize(idx)
		return err
	}
	return fn2(t)
}
func (t *TestSignedBeaconBlock) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *TestSignedBeaconBlock) HashTreeRootWith(hh sszutils.HashWalker) error {
	return t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh)
}
func (t *TestSignedBeaconBlock) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}

// Code generated by dynamic-ssz. DO NOT EDIT.
// Hash: d7a73dfcedcbfb1c2ceb1d7d620ea65c2868eafaefb124c5d3854e6070459076
// Version: v1.1.0 (https://github.com/pk910/dynamic-ssz)
package main

import (
	"github.com/attestantio/go-eth2-client/spec/altair"
	"github.com/attestantio/go-eth2-client/spec/capella"
	"github.com/attestantio/go-eth2-client/spec/deneb"
	"github.com/attestantio/go-eth2-client/spec/phase0"
	"github.com/holiman/uint256"
	dynssz "github.com/pk910/dynamic-ssz"
	"github.com/pk910/dynamic-ssz/hasher"
	"github.com/pk910/dynamic-ssz/sszutils"
	go_bitfield "github.com/prysmaticlabs/go-bitfield"
)

var _ = sszutils.ErrListTooBig

func (t *TestBeaconBlock) MarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(TestBeaconBlock)
	}
	dstlen := len(dst)
	{ // Field #0 'Slot'
		t := t.Slot
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #1 'ProposerIndex'
		t := t.ProposerIndex
		dst = sszutils.MarshalUint64(dst, uint64(t))
	}
	{ // Field #2 'ParentRoot'
		t := t.ParentRoot
		dst = append(dst, []byte(t[:32])...)
	}
	{ // Field #3 'StateRoot'
		t := t.StateRoot
		dst = append(dst, []byte(t[:32])...)
	}
	// Offset #4 'Body'
	offset4 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Dynamic Field #4 'Body'
		sszutils.UpdateOffset(dst[offset4:offset4+4], len(dst)-dstlen)
		t := t.Body
		if t == nil {
			t = new(deneb.BeaconBlockBody)
		}
		dstlen := len(dst)
		{ // Field #0 'RANDAOReveal'
			t := t.RANDAOReveal
			dst = append(dst, []byte(t[:96])...)
		}
		{ // Field #1 'ETH1Data'
			t := t.ETH1Data
			if t == nil {
				t = new(phase0.ETH1Data)
			}
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
		{ // Field #2 'Graffiti'
			t := t.Graffiti
			dst = append(dst, []byte(t[:32])...)
		}
		// Offset #3 'ProposerSlashings'
		offset3 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #4 'AttesterSlashings'
		offset4 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #5 'Attestations'
		offset5 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #6 'Deposits'
		offset6 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #7 'VoluntaryExits'
		offset7 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		{ // Field #8 'SyncAggregate'
			t := t.SyncAggregate
			if t == nil {
				t = new(altair.SyncAggregate)
			}
			{ // Field #0 'SyncCommitteeBits'
				t := t.SyncCommitteeBits
				hasLimit, limit, err := ds.ResolveSpecValue("SYNC_COMMITTEE_SIZE/8")
				if err != nil {
					return dst, err
				}
				if !hasLimit {
					limit = 64
				}
				vlen := len(t)
				if vlen > int(limit) {
					return dst, sszutils.ErrVectorLength
				}
				dst = append(dst, []byte(t[:vlen])...)
				if vlen < int(limit) {
					dst = sszutils.AppendZeroPadding(dst, (int(limit)-vlen)*1)
				}
			}
			{ // Field #1 'SyncCommitteeSignature'
				t := t.SyncCommitteeSignature
				dst = append(dst, []byte(t[:96])...)
			}
		}
		// Offset #9 'ExecutionPayload'
		offset9 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #10 'BLSToExecutionChanges'
		offset10 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		// Offset #11 'BlobKZGCommitments'
		offset11 := len(dst)
		dst = sszutils.MarshalOffset(dst, 0)
		{ // Dynamic Field #3 'ProposerSlashings'
			sszutils.UpdateOffset(dst[offset3:offset3+4], len(dst)-dstlen)
			t := t.ProposerSlashings
			hasMax, max, err := ds.ResolveSpecValue("MAX_PROPOSER_SLASHINGS")
			if err != nil {
				return dst, err
			}
			if !hasMax {
				max = 16
			}
			vlen := len(t)
			if vlen > int(max) {
				return dst, sszutils.ErrListTooBig
			}
			for i := 0; i < vlen; i++ {
				t := t[i]
				if t == nil {
					t = new(phase0.ProposerSlashing)
				}
				if dst, err = t.MarshalSSZTo(dst); err != nil {
					return dst, err
				}
			}
		}
		{ // Dynamic Field #4 'AttesterSlashings'
			sszutils.UpdateOffset(dst[offset4:offset4+4], len(dst)-dstlen)
			t := t.AttesterSlashings
			hasMax, max, err := ds.ResolveSpecValue("MAX_ATTESTER_SLASHINGS")
			if err != nil {
				return dst, err
			}
			if !hasMax {
				max = 2
			}
			vlen := len(t)
			if vlen > int(max) {
				return dst, sszutils.ErrListTooBig
			}
			dstlen := len(dst)
			dst = sszutils.AppendZeroPadding(dst, vlen*4)
			for i := 0; i < vlen; i++ {
				sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
				t := t[i]
				if t == nil {
					t = new(phase0.AttesterSlashing)
				}
				if dst, err = t.MarshalSSZTo(dst); err != nil {
					return dst, err
				}
			}
		}
		{ // Dynamic Field #5 'Attestations'
			sszutils.UpdateOffset(dst[offset5:offset5+4], len(dst)-dstlen)
			t := t.Attestations
			hasMax, max, err := ds.ResolveSpecValue("MAX_ATTESTATIONS")
			if err != nil {
				return dst, err
			}
			if !hasMax {
				max = 128
			}
			vlen := len(t)
			if vlen > int(max) {
				return dst, sszutils.ErrListTooBig
			}
			dstlen := len(dst)
			dst = sszutils.AppendZeroPadding(dst, vlen*4)
			for i := 0; i < vlen; i++ {
				sszutils.UpdateOffset(dst[dstlen+(i*4):dstlen+((i+1)*4)], len(dst)-dstlen)
				t := t[i]
				if t == nil {
					t = new(phase0.Attestation)
				}
				if dst, err = t.MarshalSSZTo(dst); err != nil {
					return dst, err
				}
			}
		}
		{ // Dynamic Field #6 'Deposits'
			sszutils.UpdateOffset(dst[offset6:offset6+4], len(dst)-dstlen)
			t := t.Deposits
			hasMax, max, err := ds.ResolveSpecValue("MAX_DEPOSITS")
			if err != nil {
				return dst, err
			}
			if !hasMax {
				max = 16
			}
			vlen := len(t)
			if vlen > int(max) {
				return dst, sszutils.ErrListTooBig
			}
			for i := 0; i < vlen; i++ {
				t := t[i]
				if t == nil {
					t = new(phase0.Deposit)
				}
				{ // Field #0 'Proof'
					t := t.Proof
					hasLimit, limit, err := ds.ResolveSpecValue("DEPOSIT_CONTRACT_TREE_DEPTH+1")
					if err != nil {
						return dst, err
					}
					if !hasLimit {
						limit = 33
					}
					vlen := len(t)
					if vlen > int(limit) {
						return dst, sszutils.ErrVectorLength
					}
					for i := 0; i < vlen; i++ {
						t := t[i]
						vlen := len(t)
						if vlen > 32 {
							return dst, sszutils.ErrVectorLength
						}
						dst = append(dst, []byte(t[:vlen])...)
						if vlen < 32 {
							dst = sszutils.AppendZeroPadding(dst, (32-vlen)*1)
						}
					}
					if vlen < int(limit) {
						dst = sszutils.AppendZeroPadding(dst, (int(limit)-vlen)*32)
					}
				}
				{ // Field #1 'Data'
					t := t.Data
					if t == nil {
						t = new(phase0.DepositData)
					}
					if dst, err = t.MarshalSSZTo(dst); err != nil {
						return dst, err
					}
				}
			}
		}
		{ // Dynamic Field #7 'VoluntaryExits'
			sszutils.UpdateOffset(dst[offset7:offset7+4], len(dst)-dstlen)
			t := t.VoluntaryExits
			hasMax, max, err := ds.ResolveSpecValue("MAX_VOLUNTARY_EXITS")
			if err != nil {
				return dst, err
			}
			if !hasMax {
				max = 16
			}
			vlen := len(t)
			if vlen > int(max) {
				return dst, sszutils.ErrListTooBig
			}
			for i := 0; i < vlen; i++ {
				t := t[i]
				if t == nil {
					t = new(phase0.SignedVoluntaryExit)
				}
				if dst, err = t.MarshalSSZTo(dst); err != nil {
					return dst, err
				}
			}
		}
		{ // Dynamic Field #9 'ExecutionPayload'
			sszutils.UpdateOffset(dst[offset9:offset9+4], len(dst)-dstlen)
			t := t.ExecutionPayload
			if t == nil {
				t = new(deneb.ExecutionPayload)
			}
			if dst, err = t.MarshalSSZTo(dst); err != nil {
				return dst, err
			}
		}
		{ // Dynamic Field #10 'BLSToExecutionChanges'
			sszutils.UpdateOffset(dst[offset10:offset10+4], len(dst)-dstlen)
			t := t.BLSToExecutionChanges
			hasMax, max, err := ds.ResolveSpecValue("MAX_BLS_TO_EXECUTION_CHANGES")
			if err != nil {
				return dst, err
			}
			if !hasMax {
				max = 16
			}
			vlen := len(t)
			if vlen > int(max) {
				return dst, sszutils.ErrListTooBig
			}
			for i := 0; i < vlen; i++ {
				t := t[i]
				if t == nil {
					t = new(capella.SignedBLSToExecutionChange)
				}
				if dst, err = t.MarshalSSZTo(dst); err != nil {
					return dst, err
				}
			}
		}
		{ // Dynamic Field #11 'BlobKZGCommitments'
			sszutils.UpdateOffset(dst[offset11:offset11+4], len(dst)-dstlen)
			t := t.BlobKZGCommitments
			hasMax, max, err := ds.ResolveSpecValue("MAX_BLOB_COMMITMENTS_PER_BLOCK")
			if err != nil {
				return dst, err
			}
			if !hasMax {
				max = 4096
			}
			vlen := len(t)
			if vlen > int(max) {
				return dst, sszutils.ErrListTooBig
			}
			for i := 0; i < vlen; i++ {
				t := t[i]
				dst = append(dst, []byte(t[:48])...)
			}
		}
	}
	return dst, nil
}

func (t *TestBeaconBlock) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	return t.MarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *TestBeaconBlock) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *TestBeaconBlock) SizeSSZDyn(_ sszutils.DynamicSpecs) (size int) {
	return t.SizeSSZ()
}

func (t *TestBeaconBlock) SizeSSZ() (size int) {
	if t == nil {
		t = new(TestBeaconBlock)
	}
	// Field #0 'Slot' static (8 bytes)
	// Field #1 'ProposerIndex' static (8 bytes)
	// Field #2 'ParentRoot' static (32 bytes)
	// Field #3 'StateRoot' static (32 bytes)
	// Field #4 'Body' offset (4 bytes)
	size += 84
	{ // Dynamic field #4 'Body'
		if t.Body == nil {
			t.Body = new(deneb.BeaconBlockBody)
		}
		size += t.Body.SizeSSZ()
	}
	return size
}

func (t *TestBeaconBlock) UnmarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (err error) {
	size2 := 1 // size expression for 'Bitvector512'
	{
		hasLimit, limit, err := ds.ResolveSpecValue("SYNC_COMMITTEE_SIZE/8")
		if err != nil {
			return err
		}
		if !hasLimit {
			limit = 64
		}
		size2 = size2 * int(limit)
	}
	size1 := size2+96 // size expression for '*SyncAggregate'
	size4 := 32 // size expression for '[][]byte'
	{
		hasLimit, limit, err := ds.ResolveSpecValue("DEPOSIT_CONTRACT_TREE_DEPTH+1")
		if err != nil {
			return err
		}
		if !hasLimit {
			limit = 33
		}
		size4 = size4 * int(limit)
	}
	size3 := size4+184 // size expression for '*Deposit'
	buflen := len(buf)
	if buflen < 84 {
		return sszutils.ErrUnexpectedEOF
	}
	{ // Field #0 'Slot' (static)
		buf := buf[0:8]
		t.Slot = phase0.Slot(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #1 'ProposerIndex' (static)
		buf := buf[8:16]
		t.ProposerIndex = phase0.ValidatorIndex(sszutils.UnmarshallUint64(buf))
	}
	{ // Field #2 'ParentRoot' (static)
		buf := buf[16:48]
		copy(t.ParentRoot[:], buf)
	}
	{ // Field #3 'StateRoot' (static)
		buf := buf[48:80]
		copy(t.StateRoot[:], buf)
	}
	// Field #4 'Body' (offset)
	offset4 := int(sszutils.UnmarshallUint32(buf[80:84]))
	if offset4 < 84 || offset4 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #4 'Body' (dynamic)
		buf := buf[offset4:]
		val1 := t.Body
		if val1 == nil {
			val1 = new(deneb.BeaconBlockBody)
		}
		exproffset := 0
		buflen := len(buf)
		if buflen < size1+232 {
			return sszutils.ErrUnexpectedEOF
		}
		{ // Field #0 'RANDAOReveal' (static)
			buf := buf[0:96]
			copy(val1.RANDAOReveal[:], buf)
		}
		{ // Field #1 'ETH1Data' (static)
			buf := buf[96:168]
			if val1.ETH1Data == nil {
				val1.ETH1Data = new(phase0.ETH1Data)
			}
			if err = val1.ETH1Data.UnmarshalSSZ(buf); err != nil {
				return err
			}
		}
		{ // Field #2 'Graffiti' (static)
			buf := buf[168:200]
			copy(val1.Graffiti[:], buf)
		}
		// Field #3 'ProposerSlashings' (offset)
		offset3 := int(sszutils.UnmarshallUint32(buf[200:204]))
		if offset3 < size1+232 || offset3 > buflen {
			return sszutils.ErrOffset
		}
		// Field #4 'AttesterSlashings' (offset)
		offset4 := int(sszutils.UnmarshallUint32(buf[204:208]))
		if offset4 < offset3 || offset4 > buflen {
			return sszutils.ErrOffset
		}
		// Field #5 'Attestations' (offset)
		offset5 := int(sszutils.UnmarshallUint32(buf[208:212]))
		if offset5 < offset4 || offset5 > buflen {
			return sszutils.ErrOffset
		}
		// Field #6 'Deposits' (offset)
		offset6 := int(sszutils.UnmarshallUint32(buf[212:216]))
		if offset6 < offset5 || offset6 > buflen {
			return sszutils.ErrOffset
		}
		// Field #7 'VoluntaryExits' (offset)
		offset7 := int(sszutils.UnmarshallUint32(buf[216:220]))
		if offset7 < offset6 || offset7 > buflen {
			return sszutils.ErrOffset
		}
		{ // Field #8 'SyncAggregate' (static)
			buf := buf[220 : size1+220]
			exproffset += int(size1)
			val2 := val1.SyncAggregate
			if val2 == nil {
				val2 = new(altair.SyncAggregate)
			}
			exproffset := 0
			buflen := len(buf)
			if buflen < size2+96 {
				return sszutils.ErrUnexpectedEOF
			}
			{ // Field #0 'SyncCommitteeBits' (static)
				buf := buf[0 : size2+0]
				exproffset += int(size2)
				hasLimit, limit, err := ds.ResolveSpecValue("SYNC_COMMITTEE_SIZE/8")
				if err != nil {
					return err
				}
				if !hasLimit {
					limit = 64
				}
				if len(val2.SyncCommitteeBits) < int(limit) {
					val2.SyncCommitteeBits = make(go_bitfield.Bitvector512, int(limit))
				} else if len(val2.SyncCommitteeBits) > int(limit) {
					val2.SyncCommitteeBits = val2.SyncCommitteeBits[:int(limit)]
				}
				copy(val2.SyncCommitteeBits[:], buf)
			}
			{ // Field #1 'SyncCommitteeSignature' (static)
				buf := buf[exproffset+0 : exproffset+96]
				copy(val2.SyncCommitteeSignature[:], buf)
			}
			val1.SyncAggregate = val2
		}
		// Field #9 'ExecutionPayload' (offset)
		offset9 := int(sszutils.UnmarshallUint32(buf[exproffset+220 : exproffset+224]))
		if offset9 < offset7 || offset9 > buflen {
			return sszutils.ErrOffset
		}
		// Field #10 'BLSToExecutionChanges' (offset)
		offset10 := int(sszutils.UnmarshallUint32(buf[exproffset+224 : exproffset+228]))
		if offset10 < offset9 || offset10 > buflen {
			return sszutils.ErrOffset
		}
		// Field #11 'BlobKZGCommitments' (offset)
		offset11 := int(sszutils.UnmarshallUint32(buf[exproffset+228 : exproffset+232]))
		if offset11 < offset10 || offset11 > buflen {
			return sszutils.ErrOffset
		}
		{ // Field #3 'ProposerSlashings' (dynamic)
			buf := buf[offset3:offset4]
			val3 := val1.ProposerSlashings
			itemCount := len(buf) / 416
			if len(buf)%416 != 0 {
				return sszutils.ErrUnexpectedEOF
			}
			if len(val3) < itemCount {
				val3 = make([]*phase0.ProposerSlashing, itemCount)
			} else if len(val3) > itemCount {
				val3 = val3[:itemCount]
			}
			for i := 0; i < itemCount; i++ {
				if val3[i] == nil {
					val3[i] = new(phase0.ProposerSlashing)
				}
				buf := buf[416*i : 416*(i+1)]
				if err = val3[i].UnmarshalSSZ(buf); err != nil {
					return err
				}
			}
			val1.ProposerSlashings = val3
		}
		{ // Field #4 'AttesterSlashings' (dynamic)
			buf := buf[offset4:offset5]
			val4 := val1.AttesterSlashings
			startOffset := int(0)
			if len(buf) != 0 {
				if len(buf) < 4 {
					return sszutils.ErrUnexpectedEOF
				}
				startOffset = int(sszutils.UnmarshallUint32(buf[0:4]))
			}
			itemCount := startOffset / 4
			if startOffset%4 != 0 || len(buf) < startOffset {
				return sszutils.ErrUnexpectedEOF
			}
			if len(val4) < itemCount {
				val4 = make([]*phase0.AttesterSlashing, itemCount)
			} else if len(val4) > itemCount {
				val4 = val4[:itemCount]
			}
			for i := 0; i < itemCount; i++ {
				var endOffset int
				if i < itemCount-1 {
					endOffset = int(sszutils.UnmarshallUint32(buf[(i+1)*4 : (i+2)*4]))
				} else {
					endOffset = len(buf)
				}
				if endOffset < startOffset || endOffset > len(buf) {
					return sszutils.ErrOffset
				}
				buf := buf[startOffset:endOffset]
				startOffset = endOffset
				val5 := val4[i]
				if val5 == nil {
					val5 = new(phase0.AttesterSlashing)
				}
				if err = val5.UnmarshalSSZ(buf); err != nil {
					return err
				}
				val4[i] = val5
			}
			val1.AttesterSlashings = val4
		}
		{ // Field #5 'Attestations' (dynamic)
			buf := buf[offset5:offset6]
			val6 := val1.Attestations
			startOffset := int(0)
			if len(buf) != 0 {
				if len(buf) < 4 {
					return sszutils.ErrUnexpectedEOF
				}
				startOffset = int(sszutils.UnmarshallUint32(buf[0:4]))
			}
			itemCount := startOffset / 4
			if startOffset%4 != 0 || len(buf) < startOffset {
				return sszutils.ErrUnexpectedEOF
			}
			if len(val6) < itemCount {
				val6 = make([]*phase0.Attestation, itemCount)
			} else if len(val6) > itemCount {
				val6 = val6[:itemCount]
			}
			for i := 0; i < itemCount; i++ {
				var endOffset int
				if i < itemCount-1 {
					endOffset = int(sszutils.UnmarshallUint32(buf[(i+1)*4 : (i+2)*4]))
				} else {
					endOffset = len(buf)
				}
				if endOffset < startOffset || endOffset > len(buf) {
					return sszutils.ErrOffset
				}
				buf := buf[startOffset:endOffset]
				startOffset = endOffset
				val7 := val6[i]
				if val7 == nil {
					val7 = new(phase0.Attestation)
				}
				if err = val7.UnmarshalSSZ(buf); err != nil {
					return err
				}
				val6[i] = val7
			}
			val1.Attestations = val6
		}
		{ // Field #6 'Deposits' (dynamic)
			buf := buf[offset6:offset7]
			val8 := val1.Deposits
			itemCount := len(buf) / size3
			if len(buf)%size3 != 0 {
				return sszutils.ErrUnexpectedEOF
			}
			if len(val8) < itemCount {
				val8 = make([]*phase0.Deposit, itemCount)
			} else if len(val8) > itemCount {
				val8 = val8[:itemCount]
			}
			for i := 0; i < itemCount; i++ {
				val9 := val8[i]
				if val9 == nil {
					val9 = new(phase0.Deposit)
				}
				buf := buf[size3*i : size3*(i+1)]
				exproffset := 0
				buflen := len(buf)
				if buflen < size4+184 {
					return sszutils.ErrUnexpectedEOF
				}
				{ // Field #0 'Proof' (static)
					buf := buf[0 : size4+0]
					exproffset += int(size4)
					val10 := val9.Proof
					hasLimit, limit, err := ds.ResolveSpecValue("DEPOSIT_CONTRACT_TREE_DEPTH+1")
					if err != nil {
						return err
					}
					if !hasLimit {
						limit = 33
					}
					if len(val10) < int(limit) {
						val10 = make([][]byte, int(limit))
					} else if len(val10) > int(limit) {
						val10 = val10[:int(limit)]
					}
					for i := 0; i < int(limit); i++ {
						buf := buf[32*i : 32*(i+1)]
						if len(val10[i]) < 32 {
							val10[i] = make([]byte, 32)
						} else if len(val10[i]) > 32 {
							val10[i] = val10[i][:32]
						}
						copy(val10[i][:], buf)
					}
					val9.Proof = val10
				}
				{ // Field #1 'Data' (static)
					buf := buf[exproffset+0 : exproffset+184]
					if val9.Data == nil {
						val9.Data = new(phase0.DepositData)
					}
					if err = val9.Data.UnmarshalSSZ(buf); err != nil {
						return err
					}
				}
				val8[i] = val9
			}
			val1.Deposits = val8
		}
		{ // Field #7 'VoluntaryExits' (dynamic)
			buf := buf[offset7:offset9]
			val11 := val1.VoluntaryExits
			itemCount := len(buf) / 112
			if len(buf)%112 != 0 {
				return sszutils.ErrUnexpectedEOF
			}
			if len(val11) < itemCount {
				val11 = make([]*phase0.SignedVoluntaryExit, itemCount)
			} else if len(val11) > itemCount {
				val11 = val11[:itemCount]
			}
			for i := 0; i < itemCount; i++ {
				if val11[i] == nil {
					val11[i] = new(phase0.SignedVoluntaryExit)
				}
				buf := buf[112*i : 112*(i+1)]
				if err = val11[i].UnmarshalSSZ(buf); err != nil {
					return err
				}
			}
			val1.VoluntaryExits = val11
		}
		{ // Field #9 'ExecutionPayload' (dynamic)
			buf := buf[offset9:offset10]
			val12 := val1.ExecutionPayload
			if val12 == nil {
				val12 = new(deneb.ExecutionPayload)
			}
			if err = val12.UnmarshalSSZ(buf); err != nil {
				return err
			}
			val1.ExecutionPayload = val12
		}
		{ // Field #10 'BLSToExecutionChanges' (dynamic)
			buf := buf[offset10:offset11]
			val13 := val1.BLSToExecutionChanges
			itemCount := len(buf) / 172
			if len(buf)%172 != 0 {
				return sszutils.ErrUnexpectedEOF
			}
			if len(val13) < itemCount {
				val13 = make([]*capella.SignedBLSToExecutionChange, itemCount)
			} else if len(val13) > itemCount {
				val13 = val13[:itemCount]
			}
			for i := 0; i < itemCount; i++ {
				if val13[i] == nil {
					val13[i] = new(capella.SignedBLSToExecutionChange)
				}
				buf := buf[172*i : 172*(i+1)]
				if err = val13[i].UnmarshalSSZ(buf); err != nil {
					return err
				}
			}
			val1.BLSToExecutionChanges = val13
		}
		{ // Field #11 'BlobKZGCommitments' (dynamic)
			buf := buf[offset11:]
			val14 := val1.BlobKZGCommitments
			itemCount := len(buf) / 48
			if len(buf)%48 != 0 {
				return sszutils.ErrUnexpectedEOF
			}
			if len(val14) < itemCount {
				val14 = make([]deneb.KZGCommitment, itemCount)
			} else if len(val14) > itemCount {
				val14 = val14[:itemCount]
			}
			for i := 0; i < itemCount; i++ {
				buf := buf[48*i : 48*(i+1)]
				copy(val14[i][:], buf)
			}
			val1.BlobKZGCommitments = val14
		}
		t.Body = val1
	}
	return nil
}

func (t *TestBeaconBlock) UnmarshalSSZ(buf []byte) (err error) {
	return t.UnmarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *TestBeaconBlock) HashTreeRootWithDyn(ds sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	if t == nil {
		t = new(TestBeaconBlock)
	}
	idx := hh.Index()
	{ // Field #0 'Slot'
		t := t.Slot
		hh.PutUint64(uint64(t))
	}
	{ // Field #1 'ProposerIndex'
		t := t.ProposerIndex
		hh.PutUint64(uint64(t))
	}
	{ // Field #2 'ParentRoot'
		t := t.ParentRoot
		hh.PutBytes(t[:32])
	}
	{ // Field #3 'StateRoot'
		t := t.StateRoot
		hh.PutBytes(t[:32])
	}
	{ // Field #4 'Body'
		t := t.Body
		if t == nil {
			t = new(deneb.BeaconBlockBody)
		}
		idx := hh.Index()
		{ // Field #0 'RANDAOReveal'
			t := t.RANDAOReveal
			hh.PutBytes(t[:96])
		}
		{ // Field #1 'ETH1Data'
			t := t.ETH1Data
			if t == nil {
				t = new(phase0.ETH1Data)
			}
			if err := t.HashTreeRootWith(hh); err != nil {
				return err
			}
		}
		{ // Field #2 'Graffiti'
			t := t.Graffiti
			hh.PutBytes(t[:32])
		}
		{ // Field #3 'ProposerSlashings'
			t := t.ProposerSlashings
			hasMax, max, err := ds.ResolveSpecValue("MAX_PROPOSER_SLASHINGS")
			if err != nil {
				return err
			}
			if !hasMax {
				max = 16
			}
			vlen := uint64(len(t))
			if vlen > uint64(max) {
				return sszutils.ErrListTooBig
			}
			idx := hh.Index()
			for i := 0; i < int(vlen); i++ {
				t := t[i]
				if t == nil {
					t = new(phase0.ProposerSlashing)
				}
				if err := t.HashTreeRootWith(hh); err != nil {
					return err
				}
			}
			limit := sszutils.CalculateLimit(uint64(max), vlen, 32)
			hh.MerkleizeWithMixin(idx, vlen, limit)
		}
		{ // Field #4 'AttesterSlashings'
			t := t.AttesterSlashings
			hasMax, max, err := ds.ResolveSpecValue("MAX_ATTESTER_SLASHINGS")
			if err != nil {
				return err
			}
			if !hasMax {
				max = 2
			}
			vlen := uint64(len(t))
			if vlen > uint64(max) {
				return sszutils.ErrListTooBig
			}
			idx := hh.Index()
			for i := 0; i < int(vlen); i++ {
				t := t[i]
				if t == nil {
					t = new(phase0.AttesterSlashing)
				}
				if err := t.HashTreeRootWith(hh); err != nil {
					return err
				}
			}
			limit := sszutils.CalculateLimit(uint64(max), vlen, 32)
			hh.MerkleizeWithMixin(idx, vlen, limit)
		}
		{ // Field #5 'Attestations'
			t := t.Attestations
			hasMax, max, err := ds.ResolveSpecValue("MAX_ATTESTATIONS")
			if err != nil {
				return err
			}
			if !hasMax {
				max = 128
			}
			vlen := uint64(len(t))
			if vlen > uint64(max) {
				return sszutils.ErrListTooBig
			}
			idx := hh.Index()
			for i := 0; i < int(vlen); i++ {
				t := t[i]
				if t == nil {
					t = new(phase0.Attestation)
				}
				idx := hh.Index()
				{ // Field #0 'AggregationBits'
					t := t.AggregationBits
					hasMax, max, err := ds.ResolveSpecValue("MAX_VALIDATORS_PER_COMMITTEE")
					if err != nil {
						return err
					}
					if !hasMax {
						max = 2048
					}
					idx := hh.Index()
					var size uint64
					var bitlist []byte
					hh.WithTemp(func(tmp []byte) []byte {
						tmp, size = hasher.ParseBitlist(tmp[:0], t[:])
						bitlist = tmp
						return tmp
					})
					if size > uint64(max) {
						return sszutils.ErrListTooBig
					}
					hh.AppendBytes32(bitlist)
					hh.MerkleizeWithMixin(idx, size, (uint64(max)+255)/256)
				}
				{ // Field #1 'Data'
					t := t.Data
					if t == nil {
						t = new(phase0.AttestationData)
					}
					if err := t.HashTreeRootWith(hh); err != nil {
						return err
					}
				}
				{ // Field #2 'Signature'
					t := t.Signature
					hh.PutBytes(t[:96])
				}
				hh.Merkleize(idx)
			}
			limit := sszutils.CalculateLimit(uint64(max), vlen, 32)
			hh.MerkleizeWithMixin(idx, vlen, limit)
		}
		{ // Field #6 'Deposits'
			t := t.Deposits
			hasMax, max, err := ds.ResolveSpecValue("MAX_DEPOSITS")
			if err != nil {
				return err
			}
			if !hasMax {
				max = 16
			}
			vlen := uint64(len(t))
			if vlen > uint64(max) {
				return sszutils.ErrListTooBig
			}
			idx := hh.Index()
			for i := 0; i < int(vlen); i++ {
				t := t[i]
				if t == nil {
					t = new(phase0.Deposit)
				}
				idx := hh.Index()
				{ // Field #0 'Proof'
					t := t.Proof
					hasLimit, limit, err := ds.ResolveSpecValue("DEPOSIT_CONTRACT_TREE_DEPTH+1")
					if err != nil {
						return err
					}
					if !hasLimit {
						limit = 33
					}
					vlen := len(t)
					if vlen > int(limit) {
						return sszutils.ErrVectorLength
					}
					idx := hh.Index()
					for i := 0; i < int(limit); i++ {
						var val1 []byte
						if i < vlen {
							val1 = t[i]
						}
						vlen := len(val1)
						if vlen > 32 {
							return sszutils.ErrVectorLength
						}
						val := val1[:]
						if vlen < 32 {
							val = sszutils.AppendZeroPadding(val, (32-vlen)*1)
						}
						hh.PutBytes(val[:32])
					}
					hh.Merkleize(idx)
				}
				{ // Field #1 'Data'
					t := t.Data
					if t == nil {
						t = new(phase0.DepositData)
					}
					if err := t.HashTreeRootWith(hh); err != nil {
						return err
					}
				}
				hh.Merkleize(idx)
			}
			limit := sszutils.CalculateLimit(uint64(max), vlen, 32)
			hh.MerkleizeWithMixin(idx, vlen, limit)
		}
		{ // Field #7 'VoluntaryExits'
			t := t.VoluntaryExits
			hasMax, max, err := ds.ResolveSpecValue("MAX_VOLUNTARY_EXITS")
			if err != nil {
				return err
			}
			if !hasMax {
				max = 16
			}
			vlen := uint64(len(t))
			if vlen > uint64(max) {
				return sszutils.ErrListTooBig
			}
			idx := hh.Index()
			for i := 0; i < int(vlen); i++ {
				t := t[i]
				if t == nil {
					t = new(phase0.SignedVoluntaryExit)
				}
				if err := t.HashTreeRootWith(hh); err != nil {
					return err
				}
			}
			limit := sszutils.CalculateLimit(uint64(max), vlen, 32)
			hh.MerkleizeWithMixin(idx, vlen, limit)
		}
		{ // Field #8 'SyncAggregate'
			t := t.SyncAggregate
			if t == nil {
				t = new(altair.SyncAggregate)
			}
			idx := hh.Index()
			{ // Field #0 'SyncCommitteeBits'
				t := t.SyncCommitteeBits
				hasLimit, limit, err := ds.ResolveSpecValue("SYNC_COMMITTEE_SIZE/8")
				if err != nil {
					return err
				}
				if !hasLimit {
					limit = 64
				}
				vlen := len(t)
				if vlen > int(limit) {
					return sszutils.ErrVectorLength
				}
				val := t[:]
				if vlen < int(limit) {
					val = sszutils.AppendZeroPadding(val, (int(limit)-vlen)*1)
				}
				hh.PutBytes(val[:int(limit)])
			}
			{ // Field #1 'SyncCommitteeSignature'
				t := t.SyncCommitteeSignature
				hh.PutBytes(t[:96])
			}
			hh.Merkleize(idx)
		}
		{ // Field #9 'ExecutionPayload'
			t := t.ExecutionPayload
			if t == nil {
				t = new(deneb.ExecutionPayload)
			}
			idx := hh.Index()
			{ // Field #0 'ParentHash'
				t := t.ParentHash
				hh.PutBytes(t[:32])
			}
			{ // Field #1 'FeeRecipient'
				t := t.FeeRecipient
				hh.PutBytes(t[:20])
			}
			{ // Field #2 'StateRoot'
				t := t.StateRoot
				hh.PutBytes(t[:32])
			}
			{ // Field #3 'ReceiptsRoot'
				t := t.ReceiptsRoot
				hh.PutBytes(t[:32])
			}
			{ // Field #4 'LogsBloom'
				t := t.LogsBloom
				hh.PutBytes(t[:256])
			}
			{ // Field #5 'PrevRandao'
				t := t.PrevRandao
				hh.PutBytes(t[:32])
			}
			{ // Field #6 'BlockNumber'
				t := t.BlockNumber
				hh.PutUint64(uint64(t))
			}
			{ // Field #7 'GasLimit'
				t := t.GasLimit
				hh.PutUint64(uint64(t))
			}
			{ // Field #8 'GasUsed'
				t := t.GasUsed
				hh.PutUint64(uint64(t))
			}
			{ // Field #9 'Timestamp'
				t := t.Timestamp
				hh.PutUint64(uint64(t))
			}
			{ // Field #10 'ExtraData'
				t := t.ExtraData
				hasMax, max, err := ds.ResolveSpecValue("MAX_EXTRA_DATA_BYTES")
				if err != nil {
					return err
				}
				if !hasMax {
					max = 32
				}
				vlen := uint64(len(t))
				if vlen > uint64(max) {
					return sszutils.ErrListTooBig
				}
				idx := hh.Index()
				hh.PutBytes(t[:])
				limit := sszutils.CalculateLimit(uint64(max), vlen, 1)
				hh.MerkleizeWithMixin(idx, vlen, limit)
			}
			{ // Field #11 'BaseFeePerGas'
				t := t.BaseFeePerGas
				if t == nil {
					t = new(uint256.Int)
				}
				if root, err := t.HashTreeRoot(); err != nil {
					return err
				} else {
					hh.AppendBytes32(root[:])
					}
			}
			{ // Field #12 'BlockHash'
				t := t.BlockHash
				hh.PutBytes(t[:32])
			}
			{ // Field #13 'Transactions'
				t := t.Transactions
				hasMax, max, err := ds.ResolveSpecValue("MAX_TRANSACTIONS_PER_PAYLOAD")
				if err != nil {
					return err
				}
				if !hasMax {
					max = 1048576
				}
				vlen := uint64(len(t))
				if vlen > uint64(max) {
					return sszutils.ErrListTooBig
				}
				idx := hh.Index()
				for i := 0; i < int(vlen); i++ {
					t := t[i]
					hasMax, max, err := ds.ResolveSpecValue("MAX_BYTES_PER_TRANSACTION")
					if err != nil {
						return err
					}
					if !hasMax {
						max = 1073741824
					}
					vlen := uint64(len(t))
					if vlen > uint64(max) {
						return sszutils.ErrListTooBig
					}
					idx := hh.Index()
					hh.PutBytes(t[:])
					limit := sszutils.CalculateLimit(uint64(max), vlen, 1)
					hh.MerkleizeWithMixin(idx, vlen, limit)
				}
				limit := sszutils.CalculateLimit(uint64(max), vlen, 32)
				hh.MerkleizeWithMixin(idx, vlen, limit)
			}
			{ // Field #14 'Withdrawals'
				t := t.Withdrawals
				hasMax, max, err := ds.ResolveSpecValue("MAX_WITHDRAWALS_PER_PAYLOAD")
				if err != nil {
					return err
				}
				if !hasMax {
					max = 16
				}
				vlen := uint64(len(t))
				if vlen > uint64(max) {
					return sszutils.ErrListTooBig
				}
				idx := hh.Index()
				for i := 0; i < int(vlen); i++ {
					t := t[i]
					if t == nil {
						t = new(capella.Withdrawal)
					}
					if err := t.HashTreeRootWith(hh); err != nil {
						return err
					}
				}
				limit := sszutils.CalculateLimit(uint64(max), vlen, 32)
				hh.MerkleizeWithMixin(idx, vlen, limit)
			}
			{ // Field #15 'BlobGasUsed'
				t := t.BlobGasUsed
				hh.PutUint64(uint64(t))
			}
			{ // Field #16 'ExcessBlobGas'
				t := t.ExcessBlobGas
				hh.PutUint64(uint64(t))
			}
			hh.Merkleize(idx)
		}
		{ // Field #10 'BLSToExecutionChanges'
			t := t.BLSToExecutionChanges
			hasMax, max, err := ds.ResolveSpecValue("MAX_BLS_TO_EXECUTION_CHANGES")
			if err != nil {
				return err
			}
			if !hasMax {
				max = 16
			}
			vlen := uint64(len(t))
			if vlen > uint64(max) {
				return sszutils.ErrListTooBig
			}
			idx := hh.Index()
			for i := 0; i < int(vlen); i++ {
				t := t[i]
				if t == nil {
					t = new(capella.SignedBLSToExecutionChange)
				}
				if err := t.HashTreeRootWith(hh); err != nil {
					return err
				}
			}
			limit := sszutils.CalculateLimit(uint64(max), vlen, 32)
			hh.MerkleizeWithMixin(idx, vlen, limit)
		}
		{ // Field #11 'BlobKZGCommitments'
			t := t.BlobKZGCommitments
			hasMax, max, err := ds.ResolveSpecValue("MAX_BLOB_COMMITMENTS_PER_BLOCK")
			if err != nil {
				return err
			}
			if !hasMax {
				max = 4096
			}
			vlen := uint64(len(t))
			if vlen > uint64(max) {
				return sszutils.ErrListTooBig
			}
			idx := hh.Index()
			for i := 0; i < int(vlen); i++ {
				t := t[i]
				hh.PutBytes(t[:48])
			}
			limit := sszutils.CalculateLimit(uint64(max), vlen, 32)
			hh.MerkleizeWithMixin(idx, vlen, limit)
		}
		hh.Merkleize(idx)
	}
	hh.Merkleize(idx)
	return nil
}

func (t *TestBeaconBlock) HashTreeRootWith(hh sszutils.HashWalker) error {
	return t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh)
}

func (t *TestBeaconBlock) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}

func (t *TestBeaconBlock) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}
func (t *TestSignedBeaconBlock) MarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (dst []byte, err error) {
	dst = buf
	if t == nil {
		t = new(TestSignedBeaconBlock)
	}
	dstlen := len(dst)
	// Offset #0 'Message'
	offset0 := len(dst)
	dst = sszutils.MarshalOffset(dst, 0)
	{ // Field #1 'Signature'
		t := t.Signature
		dst = append(dst, []byte(t[:96])...)
	}
	{ // Dynamic Field #0 'Message'
		sszutils.UpdateOffset(dst[offset0:offset0+4], len(dst)-dstlen)
		t := t.Message
		if t == nil {
			t = new(TestBeaconBlock)
		}
		if dst, err = t.MarshalSSZDyn(ds, dst); err != nil {
			return dst, err
		}
	}
	return dst, nil
}

func (t *TestSignedBeaconBlock) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	return t.MarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *TestSignedBeaconBlock) MarshalSSZ() ([]byte, error) {
	return dynssz.GetGlobalDynSsz().MarshalSSZ(t)
}
func (t *TestSignedBeaconBlock) SizeSSZDyn(ds sszutils.DynamicSpecs) (size int) {
	if t == nil {
		t = new(TestSignedBeaconBlock)
	}
	// Field #0 'Message' offset (4 bytes)
	// Field #1 'Signature' static (96 bytes)
	size += 100
	{ // Dynamic field #0 'Message'
		if t.Message == nil {
			t.Message = new(TestBeaconBlock)
		}
		size += t.Message.SizeSSZDyn(ds)
	}
	return size
}

func (t *TestSignedBeaconBlock) SizeSSZ() (size int) {
	return t.SizeSSZDyn(dynssz.GetGlobalDynSsz())
}

func (t *TestSignedBeaconBlock) UnmarshalSSZDyn(ds sszutils.DynamicSpecs, buf []byte) (err error) {
	buflen := len(buf)
	if buflen < 100 {
		return sszutils.ErrUnexpectedEOF
	}
	// Field #0 'Message' (offset)
	offset0 := int(sszutils.UnmarshallUint32(buf[0:4]))
	if offset0 < 100 || offset0 > buflen {
		return sszutils.ErrOffset
	}
	{ // Field #1 'Signature' (static)
		buf := buf[4:100]
		copy(t.Signature[:], buf)
	}
	{ // Field #0 'Message' (dynamic)
		buf := buf[offset0:]
		val1 := t.Message
		if val1 == nil {
			val1 = new(TestBeaconBlock)
		}
		if err = val1.UnmarshalSSZDyn(ds, buf); err != nil {
			return err
		}
		t.Message = val1
	}
	return nil
}

func (t *TestSignedBeaconBlock) UnmarshalSSZ(buf []byte) (err error) {
	return t.UnmarshalSSZDyn(dynssz.GetGlobalDynSsz(), buf)
}

func (t *TestSignedBeaconBlock) HashTreeRootWithDyn(ds sszutils.DynamicSpecs, hh sszutils.HashWalker) error {
	if t == nil {
		t = new(TestSignedBeaconBlock)
	}
	idx := hh.Index()
	{ // Field #0 'Message'
		t := t.Message
		if t == nil {
			t = new(TestBeaconBlock)
		}
		if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
			return err
		}
	}
	{ // Field #1 'Signature'
		t := t.Signature
		hh.PutBytes(t[:96])
	}
	hh.Merkleize(idx)
	return nil
}

func (t *TestSignedBeaconBlock) HashTreeRootWith(hh sszutils.HashWalker) error {
	return t.HashTreeRootWithDyn(dynssz.GetGlobalDynSsz(), hh)
}

func (t *TestSignedBeaconBlock) HashTreeRootDyn(ds sszutils.DynamicSpecs) ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWithDyn(ds, hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}

func (t *TestSignedBeaconBlock) HashTreeRoot() ([32]byte, error) {
	pool := &hasher.FastHasherPool
	hh := pool.Get()
	defer func() {
		pool.Put(hh)
	}()
	if err := t.HashTreeRootWith(hh); err != nil {
		return [32]byte{}, err
	}
	r, _ := hh.HashRoot()
	return r, nil
}

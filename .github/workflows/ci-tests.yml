name: Tests & Coverage

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Run spec tests in matrix (no coverage upload here)
  spec-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.22.x, 1.23.x, 1.24.x, 1.25.x]
        preset: [mainnet, minimal]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-spectests-${{ hashFiles('spectests/go.sum') }}
          
    - name: Download dependencies (spectests)
      run: |
        cd spectests
        go mod download
        
    - name: Get spec tests version
      id: spec-version
      run: |
        # Get latest non-prerelease version
        VERSION=$(curl -s https://api.github.com/repos/ethereum/consensus-spec-tests/releases | \
          jq -r '.[] | select(.prerelease == false and .draft == false) | .tag_name' | \
          grep -v -E '(alpha|beta|rc|pre)' | \
          head -1)
        
        # Fallback if no version found
        if [ -z "$VERSION" ]; then
          VERSION="v1.5.0"
        fi
        
        echo "Spec tests version: ${VERSION}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        
    - name: Cache consensus spec tests
      uses: actions/cache@v3
      with:
        path: spectests/consensus-spec-tests
        key: consensus-spec-tests-${{ matrix.preset }}-${{ steps.spec-version.outputs.version }}
          
    - name: Setup consensus spec test data
      run: |
        cd spectests
        ./setup_test_data.sh setup ${{ matrix.preset }}
        echo "CONSENSUS_SPEC_TESTS_DIR=$(./setup_test_data.sh export ${{ matrix.preset }})" >> $GITHUB_ENV
        
    - name: Run spec tests with coverage
      run: |
        cd spectests
        ./run_tests.sh ${{ matrix.preset }}
      env:
        CONSENSUS_SPEC_TESTS_DIR: ${{ env.CONSENSUS_SPEC_TESTS_DIR }}
        
    - name: Upload spec test coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: spec-coverage-go${{ matrix.go-version }}-${{ matrix.preset }}
        path: spectests/spec-coverage.out

  # Run unit tests once on latest Go version and combine with spec test coverage
  unit-tests-and-coverage:
    runs-on: ubuntu-latest
    needs: spec-tests
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.25.x
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.25.x-${{ hashFiles('**/go.sum') }}
          
    - name: Download dependencies
      run: go mod download
        
    - name: Run unit tests with coverage
      run: |
        go test -v -race -coverprofile=unit-coverage.out -covermode=atomic ./...
        
    - name: Download spec test coverage artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: spec-coverage-go1.25.x-*
        path: spec-coverage-artifacts
        
    - name: Combine all coverage reports
      run: |
        echo "mode: atomic" > combined-coverage.out
        
        # Add unit test coverage (exclude mode line, filter empty lines)
        if [ -f unit-coverage.out ]; then
          echo "Adding unit test coverage..."
          tail -n +2 unit-coverage.out | grep -v '^$' >> combined-coverage.out
        fi
        
        # Add spec test coverage from all presets (exclude mode line, adjust paths, filter empty lines)
        for artifact_dir in spec-coverage-artifacts/*/; do
          if [ -f "${artifact_dir}spec-coverage.out" ]; then
            echo "Adding spec test coverage from ${artifact_dir}..."
            # Adjust paths to be relative to root, exclude mode line, filter empty lines
            tail -n +2 "${artifact_dir}spec-coverage.out" | grep -v '^$' >> combined-coverage.out
          fi
        done
        
        # Sort and deduplicate coverage entries (keep header, process body)
        (head -n 1 combined-coverage.out; tail -n +2 combined-coverage.out | sort -k1,1 -k2,2n | sort -u -k1,1 -k2,2n) > combined-coverage-final.out
        mv combined-coverage-final.out combined-coverage.out
        
        echo "Combined coverage report created:"
        wc -l combined-coverage.out
        head -5 combined-coverage.out
        
    - name: Generate coverage report
      run: go tool cover -html=combined-coverage.out -o coverage.html
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./combined-coverage.out
        flags: combined
        name: codecov-combined
        token: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: final-coverage-report
        path: |
          coverage.html
          combined-coverage.out
          unit-coverage.out
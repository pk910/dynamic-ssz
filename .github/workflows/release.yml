name: Build Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version Number ('0.x.y')"
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.RELEASE_PAT || secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Prepare release
      run: |
        chmod +x .github/scripts/prepare-release.sh
        .github/scripts/prepare-release.sh ${{ inputs.version }}

    - uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: "release `${{ inputs.version }}`"
        branch: master
        push_options: '--force'
        skip_checkout: true

    - name: Build dynssz-gen for multiple platforms
      run: |
        cd dynssz-gen
        
        # Linux amd64
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o ../dynssz-gen-linux-amd64 .
        
        # Linux arm64
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o ../dynssz-gen-linux-arm64 .
        
        # Windows amd64
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o ../dynssz-gen-windows-amd64.exe .
        
        # macOS amd64
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o ../dynssz-gen-darwin-amd64 .
        
        # macOS arm64
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o ../dynssz-gen-darwin-arm64 .

    - name: "Generate release changelog"
      id: changelog
      run: |
        git fetch --tags
        prev_tag=$(git tag --sort=-version:refname | grep -e "^v[0-9.]*$" | head -n 1)
        echo "previous release: $prev_tag"
        if [ "$prev_tag" ]; then
          changelog=$(git log --oneline --merges --first-parent --no-decorate $prev_tag..HEAD)
        else
          changelog=$(git log --oneline --merges --first-parent --no-decorate)
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo " - ${changelog//$'\n'/$'\n' - }" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        echo "prev_tag=$prev_tag" >> $GITHUB_OUTPUT

    - name: "Generate AI release notes"
      id: ai_release_notes
      run: |
        ./.github/scripts/ai-release-notes.sh "${{ steps.changelog.outputs.prev_tag }}"
      env:
        OPENROUTER_MODEL: ${{ vars.OPENROUTER_MODEL }}
        OPENROUTER_TOKEN: ${{ secrets.OPENROUTER_TOKEN }}
        GITHUB_TOKEN: ${{ github.token }}
        GITHUB_REPOSITORY: ${{ github.repository }}

    - name: Create release
      uses: actions/create-release@v1 # v1.1.4
      id: create_release
      with:
        draft: true
        prerelease: false
        release_name: "v${{ inputs.version }}"
        tag_name: "v${{ inputs.version }}"
        body: |
          ### Major Changes
          ${{ steps.ai_release_notes.outputs.release_notes }}

          <details>
            <summary>Full changelog</summary>

            ### Full changelog
          ${{ steps.changelog.outputs.changelog }}
          </details>
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Upload release artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dynssz-gen-linux-amd64
        asset_name: dynssz-gen-${{ inputs.version }}-linux-amd64
        asset_content_type: application/octet-stream

    - name: Upload release artifacts (Linux ARM64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dynssz-gen-linux-arm64
        asset_name: dynssz-gen-${{ inputs.version }}-linux-arm64
        asset_content_type: application/octet-stream

    - name: Upload release artifacts (Windows AMD64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dynssz-gen-windows-amd64.exe
        asset_name: dynssz-gen-${{ inputs.version }}-windows-amd64.exe
        asset_content_type: application/octet-stream

    - name: Upload release artifacts (macOS AMD64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dynssz-gen-darwin-amd64
        asset_name: dynssz-gen-${{ inputs.version }}-darwin-amd64
        asset_content_type: application/octet-stream

    - name: Upload release artifacts (macOS ARM64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dynssz-gen-darwin-arm64
        asset_name: dynssz-gen-${{ inputs.version }}-darwin-arm64
        asset_content_type: application/octet-stream

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          pk910/dynamic-ssz:${{ inputs.version }}
          pk910/dynamic-ssz:latest
        platforms: linux/amd64,linux/arm64

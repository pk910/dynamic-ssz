name: Release

on:
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.RELEASE_PAT || secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Prepare release
      run: |
        chmod +x .github/scripts/prepare-release.sh
        .github/scripts/prepare-release.sh ${{ steps.version.outputs.VERSION }}

    - name: Build dynssz-gen for multiple platforms
      run: |
        cd dynssz-gen
        
        # Linux amd64
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o ../dynssz-gen-linux-amd64 .
        
        # Linux arm64
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o ../dynssz-gen-linux-arm64 .
        
        # Windows amd64
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o ../dynssz-gen-windows-amd64.exe .
        
        # macOS amd64
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o ../dynssz-gen-darwin-amd64 .
        
        # macOS arm64
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o ../dynssz-gen-darwin-arm64 .

    - name: Upload release artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dynssz-gen-linux-amd64
        asset_name: dynssz-gen-${{ steps.version.outputs.VERSION }}-linux-amd64
        asset_content_type: application/octet-stream

    - name: Upload release artifacts (Linux ARM64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dynssz-gen-linux-arm64
        asset_name: dynssz-gen-${{ steps.version.outputs.VERSION }}-linux-arm64
        asset_content_type: application/octet-stream

    - name: Upload release artifacts (Windows AMD64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dynssz-gen-windows-amd64.exe
        asset_name: dynssz-gen-${{ steps.version.outputs.VERSION }}-windows-amd64.exe
        asset_content_type: application/octet-stream

    - name: Upload release artifacts (macOS AMD64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dynssz-gen-darwin-amd64
        asset_name: dynssz-gen-${{ steps.version.outputs.VERSION }}-darwin-amd64
        asset_content_type: application/octet-stream

    - name: Upload release artifacts (macOS ARM64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dynssz-gen-darwin-arm64
        asset_name: dynssz-gen-${{ steps.version.outputs.VERSION }}-darwin-arm64
        asset_content_type: application/octet-stream

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          pk910/dynamic-ssz:${{ steps.version.outputs.VERSION }}
          pk910/dynamic-ssz:latest
        platforms: linux/amd64,linux/arm64

    - uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: "release `${{ steps.version.outputs.VERSION }}`"
        branch: master
        push_options: '--force'
        skip_checkout: true

    - name: Create submodule tag
      run: |
        # Create a tag for the dynssz-gen submodule to enable go install
        git tag -a "dynssz-gen/${{ steps.version.outputs.VERSION }}" -m "dynssz-gen ${{ steps.version.outputs.VERSION }}"
        git push origin "dynssz-gen/${{ steps.version.outputs.VERSION }}"
